{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unity3D Spline Plus Spline Mesh Deform Spline Path Finding Unreal Engine Spline Plus","title":"Home"},{"location":"#unity3d","text":"Spline Plus Spline Mesh Deform Spline Path Finding","title":"Unity3D"},{"location":"#unreal-engine","text":"Spline Plus","title":"Unreal Engine"},{"location":"Contact/","text":"Send email Twitter Unity Forum","title":"Coordinates"},{"location":"Projection/Inspector/","text":"Project the spline into 3D mesh if found , if no 3D mesh is found then projection is done on the current Unity scene grid, For this to work, the meshes where the spline plus object is being projected needs to have a 3D collider on. Variables Description Project Spline trigger a spline shape projection Raycast length The length of the projection raycast. Offset The local translation offset applied to the spline on the Y axis in case offsetting spline is required. Show projection rays Used to display the rays in your scene view. Handles projection Enables the handles projection as well, this will increases projection precision. Mesh orientation Override the spline normals with the projection mesh normals.","title":"Inspector"},{"location":"SimpleFollower/Inspector/","text":"This is the simple followers list Variables Description On/Off switch Enable/Disable follower animation. Follower game object slot The game object that you want to use as follower, \"Event\" button This opens the Follower Events window, Follower Variables Description Branch key the current branch key the follower is on, To set a branch key for the follower, select the branch from your scene view then click on Distance The current distance of the follower on the branch, the max is the length of the branch. Speed The speed of the follower. Full Speed Time The time it takes the follower to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Position Translation of the follower with a button to switch between World and local space. Rotation Rotation of the follower, with a button to turn Rotation On/Off in case this was needed. Follower animation type \u201cAuto animated\u201d move your follower with a defined speed along the spline. \u201cKeyboard input\u201d move your follower using keyboard inputs, Animation type Variables Description Auto Animated Move your follower with a defined speed along the spline. Keyboard Input Move your follower using keyboard inputs, Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction: this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Keys : the keys used to control the train when animation type is set to keyboard instead of Auto animation.","title":"Inspector"},{"location":"SimpleFollower/Inspector/#follower","text":"Variables Description Branch key the current branch key the follower is on, To set a branch key for the follower, select the branch from your scene view then click on Distance The current distance of the follower on the branch, the max is the length of the branch. Speed The speed of the follower. Full Speed Time The time it takes the follower to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Position Translation of the follower with a button to switch between World and local space. Rotation Rotation of the follower, with a button to turn Rotation On/Off in case this was needed. Follower animation type \u201cAuto animated\u201d move your follower with a defined speed along the spline. \u201cKeyboard input\u201d move your follower using keyboard inputs,","title":"Follower"},{"location":"SimpleFollower/Inspector/#animation-type","text":"Variables Description Auto Animated Move your follower with a defined speed along the spline. Keyboard Input Move your follower using keyboard inputs, Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction: this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Keys : the keys used to control the train when animation type is set to keyboard instead of Auto animation.","title":"Animation type"},{"location":"SimpleFollower/ProjectedPathFollowing/","text":"Projected path following is using raycasting on followers to sense its surroundings, the path following data is then gathered from both sources , surrounding and raw spline data then it is combined to form one final modified path following data to be used by followers. There are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow. When \u201cProjected Path Following\" is set to On, you get the following settings which will allow you to perform advanced customization . Variables Description Layer Mask Specifies layers to use for your projection rays Ray transform Used to define the transform that will hold the rays. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Follow Ground Normal The follower will use the ground mesh normals if set to true, if set to false, follower will use spline normals data instead.","title":"Projected path following"},{"location":"SplineMeshDeform/Extrude/","text":"img { display: block; margin-left: auto; margin-right: auto; } Variables Description Delete Delete the Extrude modifier \"Extrude Component\". Extrude height Change the extrusion height on the Y axis , currently the axis of extrusion supported is Y only, you can rotate your spline plus object to get extrusion on other axis in case it\u2019s needed, Rings The number of ring edges you have in your extrusion shape Cap holes fill both extrusion mesh holes, Two sided Used in case you want your mesh to be visible from both sides, if two sided is not required then it\u2019s better to keep it off for optimization purpose, Flip faces This is used to flip the visible side of your mesh Material This is where you can set the material of your extruded mesh , It is recommended to use this to change material instead of using the mesh renderer material slot. Uv Rotation Rotate the extruded mesh Uvs Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Extrude"},{"location":"SplineMeshDeform/HowItWorks/","text":"This is an explanation on how Spline mesh deform works, Spline mesh deform is a branching procedural mesh generation tool that works in parallel with Spline Plus. The rule is that for every branch, Spline mesh deform creates a Spline Plus child game object named \"MeshHolder\" to store its calculated procedural mesh . Example For the Spline plus shape bellow we have 3 branches Once we apply Spline Mesh Deform and do the setup required, we get a final result similar to the following. And we get 3 \"MeshHolder\" game objects as children for the Spline Plus game object in the scene hieararchy, The 3 children game objects, each one will hold a branch procedural mesh data, as explained in image bellow. No Prefab Mesh Children Warning Only Prefab mesh parent game object is consumed when used in Spline Mesh Deform. Required Components in a prefab mesh Warning It is required for Prefab mesh to have a \"Mesh Filter\" and \"Mesh Renderer\" components attached to the parent game object. Unity Vertices Limit Warning The Unity vertices limit for a mesh object is 64K, once you go beyond this limit you will experience some weird mesh issues, In the example bellow, we cannot keep adding Rail meshes to the branch, cause we have exceeded the Unity vertices limit set to 64k vertices, The solution is to break the branch, This will create us two branches and eventually create two mesh holder game objects instead of just one, The mesh data will be divided between the two mesh holder game objects created.","title":"How it works"},{"location":"SplineMeshDeform/HowItWorks/#example","text":"For the Spline plus shape bellow we have 3 branches Once we apply Spline Mesh Deform and do the setup required, we get a final result similar to the following. And we get 3 \"MeshHolder\" game objects as children for the Spline Plus game object in the scene hieararchy, The 3 children game objects, each one will hold a branch procedural mesh data, as explained in image bellow.","title":"Example"},{"location":"SplineMeshDeform/HowItWorks/#no-prefab-mesh-children","text":"Warning Only Prefab mesh parent game object is consumed when used in Spline Mesh Deform.","title":"No Prefab Mesh Children"},{"location":"SplineMeshDeform/HowItWorks/#required-components-in-a-prefab-mesh","text":"Warning It is required for Prefab mesh to have a \"Mesh Filter\" and \"Mesh Renderer\" components attached to the parent game object.","title":"Required Components in a prefab mesh"},{"location":"SplineMeshDeform/HowItWorks/#unity-vertices-limit","text":"Warning The Unity vertices limit for a mesh object is 64K, once you go beyond this limit you will experience some weird mesh issues, In the example bellow, we cannot keep adding Rail meshes to the branch, cause we have exceeded the Unity vertices limit set to 64k vertices, The solution is to break the branch, This will create us two branches and eventually create two mesh holder game objects instead of just one, The mesh data will be divided between the two mesh holder game objects created.","title":"Unity Vertices Limit"},{"location":"SplineMeshDeform/Introduction/","text":"Spline Mesh Deform is a procedural mesh generation modifiers collection for Spline plus . Feartures : 4 modifiers included : Deformed Mesh-Extrude-Plane Mesh-Tube Mesh Use of multiple modifiers together on the same Spline Plus Game Object Intuitive UI Highly optimized source code Mesh Deform A custom meshes procedural mesh generation modifier for Spline Plus. Feartures : Modes: Alignment / Deformation Multiple meshes combination Procedural mesh generation on all spline branches Materials sharing possibility between prefab meshes GPU processing CPU Muli threading processing Translation, rotation, scale with randomization Mirroring Mesh trimming Copy/Past/Duplicate prefab meshes Extrude Extrudes the spline plus shape and transforms it into a mesh with auto generated correct Uvs, tangents and normals. Tube Mesh Tube mesh transforms spline plus branches into fully customizable 3D mesh tubes, this can be used to easily generate pipes and wires in Unity, PlaneMesh Plane mesh is a simple and straightforward Spline mesh deform modifier, it is used to transform the spline plus branches into a plane mesh,this is very similar to the Unity line renderer except this one is controlled by spline nodes and it\u2019s generated for all spline plus branches","title":"Introduction"},{"location":"SplineMeshDeform/Introduction/#feartures","text":"4 modifiers included : Deformed Mesh-Extrude-Plane Mesh-Tube Mesh Use of multiple modifiers together on the same Spline Plus Game Object Intuitive UI Highly optimized source code","title":"Feartures :"},{"location":"SplineMeshDeform/Introduction/#mesh-deform","text":"A custom meshes procedural mesh generation modifier for Spline Plus.","title":"Mesh Deform"},{"location":"SplineMeshDeform/Introduction/#feartures_1","text":"Modes: Alignment / Deformation Multiple meshes combination Procedural mesh generation on all spline branches Materials sharing possibility between prefab meshes GPU processing CPU Muli threading processing Translation, rotation, scale with randomization Mirroring Mesh trimming Copy/Past/Duplicate prefab meshes","title":"Feartures :"},{"location":"SplineMeshDeform/Introduction/#extrude","text":"Extrudes the spline plus shape and transforms it into a mesh with auto generated correct Uvs, tangents and normals.","title":"Extrude"},{"location":"SplineMeshDeform/Introduction/#tube-mesh","text":"Tube mesh transforms spline plus branches into fully customizable 3D mesh tubes, this can be used to easily generate pipes and wires in Unity,","title":"Tube Mesh"},{"location":"SplineMeshDeform/Introduction/#planemesh","text":"Plane mesh is a simple and straightforward Spline mesh deform modifier, it is used to transform the spline plus branches into a plane mesh,this is very similar to the Unity line renderer except this one is controlled by spline nodes and it\u2019s generated for all spline plus branches","title":"PlaneMesh"},{"location":"SplineMeshDeform/MeshDeform/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline Mesh Deform Inspector for the selected branch with key 0. Settings Variables Description Delete Delete the Deformed Mesh modifier \"Deformed Mesh Component\". Prefab meshes area This contains a list of prefab meshes of the currently selected branch, Settings bellow are for the selected prefab mesh highlighted in blue as shown in the first image. Prefab mesh name It usually receives the prefab name but it can be edited to whatever text you want. Just click on the text area and start typing for editing. Prefab mesh The prefab mesh used. Materials Material section for the selected prefab mesh. Spline mesh deform supports multiple materials. You can add the selected prefab mesh material to the materials list by setting unique to true so it can be reused by other prefab meshes. This will optimize performance by sharing materials between prefab meshes. Type Currently there are two types supported , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Mesh trim Available only in Deformation Type Define if you want to have the mesh to extend beyond the branch distance limits, available options: None, Left, Right, Both Mirror axis Create a mirror effect on a defined axis, you can use rotation and translation to create a mirroring offset Offset Translate the proceduraly calculated meshes. Rotation Rotate the proceduraly calculated meshes. Lock :Lock the rotation. this is available only in the alignement type. Lock : Off Lock : On Scale Scale the proceduraly calculated meshes Unif : On in case you want to scale in all 3 axes all at once, Off in case you want to scale on separate axis, Rand Used to create a random Offset, Rotation or Scale behaviour Once Rand is set to On then new Offset , Rotation or Scale fields appear , the randomization will be done between the two fields values. Seed Used to change the randomization seed Tiling Used to define how many times you want the mesh to be repeated along the spline. Auto tiling This calculates automatically how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Used to control the space between the meshes of the prefab mesh. Linked/ Unlinked This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction. Deformation processing The processing method used for the deformed mesh calculation , There are 3 options available, GPU , CPU Multi threaded, CPU Single threaded Export Export mesh to an asset file , the file can be found in \"Assets/SMDExport\" Items Menu Right click in your prefab meshes area to open up the items menu for the selected prefab mesh. Variables Description Hide/Unhide Hide/unhide the selected prefab mesh. Delete Delete the selected prefab mesh. Duplicate Duplicate the selected prefab mesh. Copy Copy the selected prefab mesh. To past the copied prefab mesh, click on an empty area in the prefab meshes section and click past.","title":"Inspector"},{"location":"SplineMeshDeform/MeshDeform/#settings","text":"Variables Description Delete Delete the Deformed Mesh modifier \"Deformed Mesh Component\". Prefab meshes area This contains a list of prefab meshes of the currently selected branch, Settings bellow are for the selected prefab mesh highlighted in blue as shown in the first image. Prefab mesh name It usually receives the prefab name but it can be edited to whatever text you want. Just click on the text area and start typing for editing. Prefab mesh The prefab mesh used. Materials Material section for the selected prefab mesh. Spline mesh deform supports multiple materials. You can add the selected prefab mesh material to the materials list by setting unique to true so it can be reused by other prefab meshes. This will optimize performance by sharing materials between prefab meshes. Type Currently there are two types supported , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Mesh trim Available only in Deformation Type Define if you want to have the mesh to extend beyond the branch distance limits, available options: None, Left, Right, Both Mirror axis Create a mirror effect on a defined axis, you can use rotation and translation to create a mirroring offset Offset Translate the proceduraly calculated meshes. Rotation Rotate the proceduraly calculated meshes. Lock :Lock the rotation. this is available only in the alignement type. Lock : Off Lock : On Scale Scale the proceduraly calculated meshes Unif : On in case you want to scale in all 3 axes all at once, Off in case you want to scale on separate axis, Rand Used to create a random Offset, Rotation or Scale behaviour Once Rand is set to On then new Offset , Rotation or Scale fields appear , the randomization will be done between the two fields values. Seed Used to change the randomization seed Tiling Used to define how many times you want the mesh to be repeated along the spline. Auto tiling This calculates automatically how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Used to control the space between the meshes of the prefab mesh. Linked/ Unlinked This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction. Deformation processing The processing method used for the deformed mesh calculation , There are 3 options available, GPU , CPU Multi threaded, CPU Single threaded Export Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Settings"},{"location":"SplineMeshDeform/MeshDeform/#items-menu","text":"Right click in your prefab meshes area to open up the items menu for the selected prefab mesh. Variables Description Hide/Unhide Hide/unhide the selected prefab mesh. Delete Delete the selected prefab mesh. Duplicate Duplicate the selected prefab mesh. Copy Copy the selected prefab mesh. To past the copied prefab mesh, click on an empty area in the prefab meshes section and click past.","title":"Items Menu"},{"location":"SplineMeshDeform/PlaneMesh/","text":"img { display: block; margin-left: auto; margin-right: auto; } Variables Description Delete Delete the Plane Mesh modifier \"Plane Mesh Component\". Width Used to change the width of the plane mesh generated Flip faces Used to flip the visible side of your Plane meshes Two sided Used in case you want your Plane meshes to be visible from both sides, it\u2019s recommended to turn this off Material The Plane mesh material Uv Rotation Rotate the plane mesh Uvs Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Plane Mesh"},{"location":"SplineMeshDeform/TubeMesh/","text":"img { display: block; margin-left: auto; margin-right: auto; } Variables Description Delete Delete the Tube Mesh modifier \"Tube Mesh Component\". Radius This is the tube radius Segments This is the number of segments the tubes will have, Flip faces Flip the tubes mesh faces Two sides The tube mesh will be visible from inside as from outside if it\u2019s set to true. Material The tube mesh material Uv Rotation Rotate the tube mesh Uvs Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Tube Mesh"},{"location":"SplineMeshDeform/API/Index/","text":"Deformed Mesh Add Update Processing Prefab Mesh Create Game Object Deformation Type Mesh Trim Mirror Material Offset Rotation Scale Spacing Tiling Placement","title":"API"},{"location":"SplineMeshDeform/API/Index/#deformed-mesh","text":"Add Update Processing","title":"Deformed Mesh"},{"location":"SplineMeshDeform/API/Index/#prefab-mesh","text":"Create Game Object Deformation Type Mesh Trim Mirror Material Offset Rotation Scale Spacing Tiling Placement","title":"Prefab Mesh"},{"location":"SplineMeshDeform/API/DeformedMesh/Add/","text":"Deformed Mesh = Add public static DeformedMesh Add_DeformMesh () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object and set its type to deformed mesh var deformedMesh = sPData . Add_DeformMesh ();","title":"[Deformed Mesh](../Index.md)=> Add"},{"location":"SplineMeshDeform/API/DeformedMesh/Add/#deformed-mesh-add","text":"public static DeformedMesh Add_DeformMesh () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object and set its type to deformed mesh var deformedMesh = sPData . Add_DeformMesh ();","title":"Deformed Mesh=&gt; Add"},{"location":"SplineMeshDeform/API/DeformedMesh/Processing/","text":"Deformed Mesh = Processing Set public static void Set_Processing ( Processing processing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Do the procedural meshes calculations on the GPU deformedMesh . Set_Processing ( Processing . GPU ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Processing Get_Processing ( this DeformedMesh deformedMesh ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Get the processing hardware type used for deformedMesh var processing = deformedMesh . Get_Processing (); Debug . Log ( processing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Deformed Mesh](../Index.md)=> Processing"},{"location":"SplineMeshDeform/API/DeformedMesh/Processing/#deformed-mesh-processing","text":"","title":"Deformed Mesh=&gt; Processing"},{"location":"SplineMeshDeform/API/DeformedMesh/Processing/#set","text":"public static void Set_Processing ( Processing processing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Do the procedural meshes calculations on the GPU deformedMesh . Set_Processing ( Processing . GPU ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/DeformedMesh/Processing/#get","text":"public static Processing Get_Processing ( this DeformedMesh deformedMesh ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Get the processing hardware type used for deformedMesh var processing = deformedMesh . Get_Processing (); Debug . Log ( processing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/DeformedMesh/Update/","text":"Deformed Mesh = Update Update branches public static void Update_Branches ( bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Update Branch public static void Update_Branch ( int branchKey , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on branch with key 3 deformedMesh . Update_Branch ( 3 , true , true ); Update Node public static void Update_Node ( Node node , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) var node = sPData . BranchesDict [ 3 ] . Nodes [ 0 ] ; //Update procedural mesh generated on the branches connected to node deformedMesh . Update_Node ( node , true , true );","title":"[Deformed Mesh](../Index.md)=> Update"},{"location":"SplineMeshDeform/API/DeformedMesh/Update/#deformed-mesh-update","text":"","title":"Deformed Mesh=&gt; Update"},{"location":"SplineMeshDeform/API/DeformedMesh/Update/#update-branches","text":"public static void Update_Branches ( bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Update branches"},{"location":"SplineMeshDeform/API/DeformedMesh/Update/#update-branch","text":"public static void Update_Branch ( int branchKey , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on branch with key 3 deformedMesh . Update_Branch ( 3 , true , true );","title":"Update Branch"},{"location":"SplineMeshDeform/API/DeformedMesh/Update/#update-node","text":"public static void Update_Node ( Node node , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) var node = sPData . BranchesDict [ 3 ] . Nodes [ 0 ] ; //Update procedural mesh generated on the branches connected to node deformedMesh . Update_Node ( node , true , true );","title":"Update Node"},{"location":"SplineMeshDeform/API/PrefabMesh/Create/","text":"Prefab Mesh = Create public static PrefabMesh Create_PrefabMesh ( int branchKey , GameObject prefabMeshGO ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Create"},{"location":"SplineMeshDeform/API/PrefabMesh/Create/#prefab-mesh-create","text":"public static PrefabMesh Create_PrefabMesh ( int branchKey , GameObject prefabMeshGO ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Prefab Mesh=&gt; Create"},{"location":"SplineMeshDeform/API/PrefabMesh/DeformationType/","text":"Prefab Mesh = Deformation Type Set public static void Set_DeformationType ( DeformationType deformationType ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set deformation type to deformation prefabMesh . Set_DeformationType ( DeformationType . Deformation ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static DeformationType Get_DeformationType () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh Deformation type var deformationType = prefabMesh . Get_DeformationType (); Debug . Log ( deformationType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Deformation Type"},{"location":"SplineMeshDeform/API/PrefabMesh/DeformationType/#prefab-mesh-deformation-type","text":"","title":"Prefab Mesh=&gt; Deformation Type"},{"location":"SplineMeshDeform/API/PrefabMesh/DeformationType/#set","text":"public static void Set_DeformationType ( DeformationType deformationType ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set deformation type to deformation prefabMesh . Set_DeformationType ( DeformationType . Deformation ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/DeformationType/#get","text":"public static DeformationType Get_DeformationType () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh Deformation type var deformationType = prefabMesh . Get_DeformationType (); Debug . Log ( deformationType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/GameObject/","text":"Prefab Mesh = Game Object Set public static void Set_Prefab ( GameObject prefab , string name ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , FensePrefab . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static GameObject Get_Prefab () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , Fence ); // Get the prefab game object of the prefabMesh var prefabGO = prefabMesh . Get_Prefab (); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Game Object"},{"location":"SplineMeshDeform/API/PrefabMesh/GameObject/#prefab-mesh-game-object","text":"","title":"Prefab Mesh=&gt; Game Object"},{"location":"SplineMeshDeform/API/PrefabMesh/GameObject/#set","text":"public static void Set_Prefab ( GameObject prefab , string name ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , FensePrefab . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/GameObject/#get","text":"public static GameObject Get_Prefab () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , Fence ); // Get the prefab game object of the prefabMesh var prefabGO = prefabMesh . Get_Prefab (); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Material/","text":"Prefab Mesh = Material Set public static void Set_Material ( Material mat ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh material prefabMesh . Set_Material ( mat ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Material Get_Material () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh material var mat = prefabMesh . Get_Material (); Debug . Log ( mat . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Material"},{"location":"SplineMeshDeform/API/PrefabMesh/Material/#prefab-mesh-material","text":"","title":"Prefab Mesh=&gt; Material"},{"location":"SplineMeshDeform/API/PrefabMesh/Material/#set","text":"public static void Set_Material ( Material mat ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh material prefabMesh . Set_Material ( mat ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/Material/#get","text":"public static Material Get_Material () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh material var mat = prefabMesh . Get_Material (); Debug . Log ( mat . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/MeshTrim/","text":"Prefab Mesh = Mesh Trim Set public static void Set_MeshTrim ( MeshTrim meshTrim ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set MeshTrim type for prefabMesh prefabMesh . Set_MeshTrim ( MeshTrim . Both ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static MeshTrim Get_MeshTrim () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh MeshTrim type var meshTrimType = prefabMesh . Get_MeshTrim (); Debug . Log ( meshTrimType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Mesh Trim"},{"location":"SplineMeshDeform/API/PrefabMesh/MeshTrim/#prefab-mesh-mesh-trim","text":"","title":"Prefab Mesh=&gt; Mesh Trim"},{"location":"SplineMeshDeform/API/PrefabMesh/MeshTrim/#set","text":"public static void Set_MeshTrim ( MeshTrim meshTrim ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set MeshTrim type for prefabMesh prefabMesh . Set_MeshTrim ( MeshTrim . Both ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/MeshTrim/#get","text":"public static MeshTrim Get_MeshTrim () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh MeshTrim type var meshTrimType = prefabMesh . Get_MeshTrim (); Debug . Log ( meshTrimType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Mirror/","text":"Prefab Mesh = Mirror Set public static void Set_MirrorAxis ( MirrorAxes mirrorAxis ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh mirror axis to z prefabMesh . Set_MirrorAxis ( MirrorAxes . z ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static MirrorAxes Get_MirrorAxis () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh mirror axis var mirrorAxis = prefabMesh . Get_MirrorAxis (); Debug . Log ( mirrorAxis ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Mirror"},{"location":"SplineMeshDeform/API/PrefabMesh/Mirror/#prefab-mesh-mirror","text":"","title":"Prefab Mesh=&gt; Mirror"},{"location":"SplineMeshDeform/API/PrefabMesh/Mirror/#set","text":"public static void Set_MirrorAxis ( MirrorAxes mirrorAxis ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh mirror axis to z prefabMesh . Set_MirrorAxis ( MirrorAxes . z ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/Mirror/#get","text":"public static MirrorAxes Get_MirrorAxis () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh mirror axis var mirrorAxis = prefabMesh . Get_MirrorAxis (); Debug . Log ( mirrorAxis ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Offset/","text":"Prefab Mesh = Offset Set public static void Set_Offset ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh offset prefabMesh . Set_Offset ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Vector3 Get_Offset () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh offset var offset = prefabMesh . Get_Offset (); Debug . Log ( offset ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Offset"},{"location":"SplineMeshDeform/API/PrefabMesh/Offset/#prefab-mesh-offset","text":"","title":"Prefab Mesh=&gt; Offset"},{"location":"SplineMeshDeform/API/PrefabMesh/Offset/#set","text":"public static void Set_Offset ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh offset prefabMesh . Set_Offset ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/Offset/#get","text":"public static Vector3 Get_Offset () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh offset var offset = prefabMesh . Get_Offset (); Debug . Log ( offset ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Placement/","text":"Prefab Mesh = Placement Set public static void Set_Placement ( float placement ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh placement value prefabMesh . Set_Placement ( 2.5 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static float Get_Placement () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh placemenet value var placemenet = prefabMesh . Get_Placement (); Debug . Log ( placemenet ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Placement"},{"location":"SplineMeshDeform/API/PrefabMesh/Placement/#prefab-mesh-placement","text":"","title":"Prefab Mesh=&gt; Placement"},{"location":"SplineMeshDeform/API/PrefabMesh/Placement/#set","text":"public static void Set_Placement ( float placement ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh placement value prefabMesh . Set_Placement ( 2.5 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/Placement/#get","text":"public static float Get_Placement () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh placemenet value var placemenet = prefabMesh . Get_Placement (); Debug . Log ( placemenet ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Rotation/","text":"Prefab Mesh = Rotation Set public static void Set_Rotation ( Vector3 rot ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh rotation prefabMesh . Set_Rotation ( new Vector3 ( 90 , 0 , 180 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Vector3 Get_Rotation () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh rotation var rot = prefabMesh . Get_Rotation (); Debug . Log ( rot ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Rotation"},{"location":"SplineMeshDeform/API/PrefabMesh/Rotation/#prefab-mesh-rotation","text":"","title":"Prefab Mesh=&gt; Rotation"},{"location":"SplineMeshDeform/API/PrefabMesh/Rotation/#set","text":"public static void Set_Rotation ( Vector3 rot ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh rotation prefabMesh . Set_Rotation ( new Vector3 ( 90 , 0 , 180 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/Rotation/#get","text":"public static Vector3 Get_Rotation () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh rotation var rot = prefabMesh . Get_Rotation (); Debug . Log ( rot ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Scale/","text":"Prefab Mesh = Scale Set Non Uniform Scale public static void Set_NonUniform_Scale ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh non uniform scale prefabMesh . Set_NonUniform_Scale ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get Non Uniform Scale public static Vector3 Get_NodeUniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh non uniform scale var scale = prefabMesh . Get_NodeUniform_Scale (); Debug . Log ( scale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Set Uniform Scale public static void Set_Uniform_Scale ( float uniformScale ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh uniform scale prefabMesh . Set_Uniform_Scale ( 0.5f ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get Non Uniform Scale public static float Get_Uniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh uniform scale var uniformScale = prefabMesh . Get_Uniform_Scale (); Debug . Log ( uniformScale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Enable/Disable Uniform Scale public static void Scale_Uniform ( bool isUniform ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Enable prefabMesh uniform scale prefabMesh . Scale_Uniform ( true ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Scale"},{"location":"SplineMeshDeform/API/PrefabMesh/Scale/#prefab-mesh-scale","text":"","title":"Prefab Mesh=&gt; Scale"},{"location":"SplineMeshDeform/API/PrefabMesh/Scale/#set-non-uniform-scale","text":"public static void Set_NonUniform_Scale ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh non uniform scale prefabMesh . Set_NonUniform_Scale ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set Non Uniform Scale"},{"location":"SplineMeshDeform/API/PrefabMesh/Scale/#get-non-uniform-scale","text":"public static Vector3 Get_NodeUniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh non uniform scale var scale = prefabMesh . Get_NodeUniform_Scale (); Debug . Log ( scale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get Non Uniform Scale"},{"location":"SplineMeshDeform/API/PrefabMesh/Scale/#set-uniform-scale","text":"public static void Set_Uniform_Scale ( float uniformScale ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh uniform scale prefabMesh . Set_Uniform_Scale ( 0.5f ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set Uniform Scale"},{"location":"SplineMeshDeform/API/PrefabMesh/Scale/#get-non-uniform-scale_1","text":"public static float Get_Uniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh uniform scale var uniformScale = prefabMesh . Get_Uniform_Scale (); Debug . Log ( uniformScale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get Non Uniform Scale"},{"location":"SplineMeshDeform/API/PrefabMesh/Scale/#enabledisable-uniform-scale","text":"public static void Scale_Uniform ( bool isUniform ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Enable prefabMesh uniform scale prefabMesh . Scale_Uniform ( true ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Enable/Disable Uniform Scale"},{"location":"SplineMeshDeform/API/PrefabMesh/Spacing/","text":"Prefab Mesh = Spacing Set public static void Set_Spacing ( float spacing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh spacing prefabMesh . Set_Spacing ( 10 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static float Get_Spacing () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh spacing var spacing = prefabMesh . Get_Spacing (); Debug . Log ( spacing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Spacing"},{"location":"SplineMeshDeform/API/PrefabMesh/Spacing/#prefab-mesh-spacing","text":"","title":"Prefab Mesh=&gt; Spacing"},{"location":"SplineMeshDeform/API/PrefabMesh/Spacing/#set","text":"public static void Set_Spacing ( float spacing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh spacing prefabMesh . Set_Spacing ( 10 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/Spacing/#get","text":"public static float Get_Spacing () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh spacing var spacing = prefabMesh . Get_Spacing (); Debug . Log ( spacing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Tiling/","text":"Prefab Mesh = Tiling Set public static void Set_Tiling ( int tiling ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh tiling value prefabMesh . Set_Tiling ( 15 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static int Get_Tiling () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh tiling value var tiling = prefabMesh . Get_Tiling (); Debug . Log ( tiling ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Auto Tiling Called to calculate the required tilling value to fill the branch, public static void AutoTile ( Branch branch ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); var branch = sPData . BranchesDict [ 3 ] ; // Auto calculate the tiling value required to fill the branch prefabMesh . AutoTile ( branch ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Tiling"},{"location":"SplineMeshDeform/API/PrefabMesh/Tiling/#prefab-mesh-tiling","text":"","title":"Prefab Mesh=&gt; Tiling"},{"location":"SplineMeshDeform/API/PrefabMesh/Tiling/#set","text":"public static void Set_Tiling ( int tiling ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh tiling value prefabMesh . Set_Tiling ( 15 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"SplineMeshDeform/API/PrefabMesh/Tiling/#get","text":"public static int Get_Tiling () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh tiling value var tiling = prefabMesh . Get_Tiling (); Debug . Log ( tiling ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"SplineMeshDeform/API/PrefabMesh/Tiling/#auto-tiling","text":"Called to calculate the required tilling value to fill the branch, public static void AutoTile ( Branch branch ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); var branch = sPData . BranchesDict [ 3 ] ; // Auto calculate the tiling value required to fill the branch prefabMesh . AutoTile ( branch ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Auto Tiling"},{"location":"SplinePathFinding/Events/","text":"Variables Description Title Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, OnAwake, OnMove, IDLE, OnKeyPressed Custom Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met Other Events OnAwake Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Variables Description OnMove Events Events you want to trigger when follower starts moving IDLE Variables Description IDLE Events Events you want to trigger when follower stops moving OnKeyPressed Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"Events"},{"location":"SplinePathFinding/Events/#custom","text":"Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Custom"},{"location":"SplinePathFinding/Events/#other-events","text":"","title":"Other Events"},{"location":"SplinePathFinding/Events/#onawake","text":"Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"SplinePathFinding/Events/#onmove","text":"Variables Description OnMove Events Events you want to trigger when follower starts moving","title":"OnMove"},{"location":"SplinePathFinding/Events/#idle","text":"Variables Description IDLE Events Events you want to trigger when follower stops moving","title":"IDLE"},{"location":"SplinePathFinding/Events/#onkeypressed","text":"Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"SplinePathFinding/Inspector/","text":"Agent Variables Description On/Off switch Enable/disable agent animation. agent game object slot The game object that you want to use as an agent. Event Button Open agent Events swindow Branch key Agent current branch key , this is the branch key the agent will start path following on , To add the branch key, select the branch from scene view then click on the \u2018Return\u2019 button, the key will be added automatically to the field. Distance The current distance of the agent on the branch, the max is the length of the branch. Speed The speed of the agent. Full Speed Time The time it takes the agent to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed. Gizmos Color The color of the line gizmo that will display the path found from the agent to the goal Goal Variables Description On/Off switch Enable/disable goal animation. Goal game object slot The game object that you want to use as a goal for your agent game objects to find. Event Button Open agent Events swindow Branch key Current goal branch key in the editor, To add the branch key select the branch from scene view then click on the \u2018return\u2019 button, the key will be added automatically to the field Distance The current distance of the goal on the branch, the max is the length of the branch. Speed The speed of the goal Full Speed Time The time it takes the agent to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Position Translation of the goal with a button to switch between World and local space. Rotation Rotation of the goal, with a button to turn Rotation On/Off in case it is needed. Animation type Variables Description Auto Animated Move your goal with a defined speed along the spline. Keyboard Input Move your goal using keyboard inputs, Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on goal speed\u201d. brakes force will impact the goal speed as its value goes up, Variables Description Update Time The time is sec between each path finding calculation in runtime. Consider Tangents Consider branches with correct tangents when finding shortest path to goal. Tangents On Tangents Off","title":"Inspector"},{"location":"SplinePathFinding/Inspector/#agent","text":"Variables Description On/Off switch Enable/disable agent animation. agent game object slot The game object that you want to use as an agent. Event Button Open agent Events swindow Branch key Agent current branch key , this is the branch key the agent will start path following on , To add the branch key, select the branch from scene view then click on the \u2018Return\u2019 button, the key will be added automatically to the field. Distance The current distance of the agent on the branch, the max is the length of the branch. Speed The speed of the agent. Full Speed Time The time it takes the agent to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed. Gizmos Color The color of the line gizmo that will display the path found from the agent to the goal","title":"Agent"},{"location":"SplinePathFinding/Inspector/#goal","text":"Variables Description On/Off switch Enable/disable goal animation. Goal game object slot The game object that you want to use as a goal for your agent game objects to find. Event Button Open agent Events swindow Branch key Current goal branch key in the editor, To add the branch key select the branch from scene view then click on the \u2018return\u2019 button, the key will be added automatically to the field Distance The current distance of the goal on the branch, the max is the length of the branch. Speed The speed of the goal Full Speed Time The time it takes the agent to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Position Translation of the goal with a button to switch between World and local space. Rotation Rotation of the goal, with a button to turn Rotation On/Off in case it is needed.","title":"Goal"},{"location":"SplinePathFinding/Inspector/#animation-type","text":"Variables Description Auto Animated Move your goal with a defined speed along the spline. Keyboard Input Move your goal using keyboard inputs, Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on goal speed\u201d. brakes force will impact the goal speed as its value goes up, Variables Description Update Time The time is sec between each path finding calculation in runtime. Consider Tangents Consider branches with correct tangents when finding shortest path to goal.","title":"Animation type"},{"location":"SplinePathFinding/Inspector/#tangents-on","text":"","title":"Tangents On"},{"location":"SplinePathFinding/Inspector/#tangents-off","text":"","title":"Tangents Off"},{"location":"SplinePathFinding/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline Path Finding is a path finding system for splines, it's a combination of the branching spline system Spline Plus and the path finding algorithm Dijkstra, Features Multiple agents. Advanced Events for both Goal and Agents Spline Plus advanced editing actions to quickly build complex paths. Use of Unity Reorderable lists Full source code included Example scenes included","title":"Introduction"},{"location":"SplinePathFinding/Introduction/#features","text":"Multiple agents. Advanced Events for both Goal and Agents Spline Plus advanced editing actions to quickly build complex paths. Use of Unity Reorderable lists Full source code included Example scenes included","title":"Features"},{"location":"SplinePlus/BranchEdit/","text":"Right click in your scene view to bring up the generic menu where you get acces to branch editing actions. Add To add a new branch, select a node from your scene view and click \"Add\" in the items menu, the selected node will be considered as the origin of the newly created branch. Delete To delete a branch, first you select the branch you want to delete then use the \"Delete\" action in the branch section of the items menu. Weld It is done through adding nodes to branch forks, Node= Add= Forks This time you target the already existing nodes that you want your branch to form a bridge with, see image bellow for better understanding Reverse Reverse the direction of the branch selected.","title":"Branch"},{"location":"SplinePlus/BranchEdit/#add","text":"To add a new branch, select a node from your scene view and click \"Add\" in the items menu, the selected node will be considered as the origin of the newly created branch.","title":"Add"},{"location":"SplinePlus/BranchEdit/#delete","text":"To delete a branch, first you select the branch you want to delete then use the \"Delete\" action in the branch section of the items menu.","title":"Delete"},{"location":"SplinePlus/BranchEdit/#weld","text":"It is done through adding nodes to branch forks, Node= Add= Forks This time you target the already existing nodes that you want your branch to form a bridge with, see image bellow for better understanding","title":"Weld"},{"location":"SplinePlus/BranchEdit/#reverse","text":"Reverse the direction of the branch selected.","title":"Reverse"},{"location":"SplinePlus/Events/","text":"Variables Description Title Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, OnAwake, OnMove, IDLE, OnKeyPressed Custom Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met Other Events OnAwake Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Variables Description OnMove Events Events you want to trigger when follower starts moving IDLE Variables Description IDLE Events Events you want to trigger when follower stops moving OnKeyPressed Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"Events"},{"location":"SplinePlus/Events/#custom","text":"Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Custom"},{"location":"SplinePlus/Events/#other-events","text":"","title":"Other Events"},{"location":"SplinePlus/Events/#onawake","text":"Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"SplinePlus/Events/#onmove","text":"Variables Description OnMove Events Events you want to trigger when follower starts moving","title":"OnMove"},{"location":"SplinePlus/Events/#idle","text":"Variables Description IDLE Events Events you want to trigger when follower stops moving","title":"IDLE"},{"location":"SplinePlus/Events/#onkeypressed","text":"Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"SplinePlus/GeneralInformation/","text":"Node They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , The Number on top is the node index in the selected branch nodes list . Info Click on the node in your scene view to directly select a node. Branch A branch is formed by nodes. the selected branch is marked with green color in your scene view as shown in the image bellow, Info Click on the branch in your scene view to select it. Shared node A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow. Info The node index on top changes based on the branch you're selecting","title":"General information"},{"location":"SplinePlus/GeneralInformation/#node","text":"They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , The Number on top is the node index in the selected branch nodes list . Info Click on the node in your scene view to directly select a node.","title":"Node"},{"location":"SplinePlus/GeneralInformation/#branch","text":"A branch is formed by nodes. the selected branch is marked with green color in your scene view as shown in the image bellow, Info Click on the branch in your scene view to select it.","title":"Branch"},{"location":"SplinePlus/GeneralInformation/#shared-node","text":"A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow. Info The node index on top changes based on the branch you're selecting","title":"Shared node"},{"location":"SplinePlus/Installation/","text":"All Packages from ElseForty are placed in the 'ElseForty' folder once imported. To Add a Spline Plus game object to your scene hierarchy.","title":"Installation"},{"location":"SplinePlus/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline Plus is a compact branching splines system and advanced path following for Unity3D. Feartures Spline Branches Advanced Events system Customizable follower behaviour at intersections Spline shape projection Projected path following Keyboard Follower animation Smooth Acceleration/Decceleration Spline keyboard navigation Node Speed control Node Normal control Node type : Smooth, Broken, Free Nodes chamfering Save and append spline data in .SP files Use of Unity Reorderable lists API to Create splines in runtime Highly optimized Full source code","title":"Introduction"},{"location":"SplinePlus/Introduction/#feartures","text":"Spline Branches Advanced Events system Customizable follower behaviour at intersections Spline shape projection Projected path following Keyboard Follower animation Smooth Acceleration/Decceleration Spline keyboard navigation Node Speed control Node Normal control Node type : Smooth, Broken, Free Nodes chamfering Save and append spline data in .SP files Use of Unity Reorderable lists API to Create splines in runtime Highly optimized Full source code","title":"Feartures"},{"location":"SplinePlus/Modifiers/","text":"Use this section to add Modifiers to your Spline plus game object. You can add the same modifier for multiple times in case it is needed. Supported Modifiers Spline Mesh Deform Spline Path Finding Spline Trains Info Make sure you have these modifiers in your project before trying to add them.","title":"Modifiers"},{"location":"SplinePlus/Modifiers/#supported-modifiers","text":"Spline Mesh Deform Spline Path Finding Spline Trains Info Make sure you have these modifiers in your project before trying to add them.","title":"Supported Modifiers"},{"location":"SplinePlus/Node/","text":"The section for the selected node settings Node Points Node points area is used to control the node position and its handles manually from the editor, this can be useful in case you\u2019re seeking precision in positioning your nodes, Node Settings Variables Description Normal Normal value of the selected node, the value is set to zero by default, it varies from -180 to 180 To visualize the normals in your scene view, you have to enable \u201cHelpers\u201d which can be found in the \"Settings\" section, Speed Speed value of the selected node The speed variation [0,100] is represented by a spline color variation, red color means that the speed is minimum at that position, if color is green or gray then speed is maximum Node type The selected node type, Free ,Smooth, broken Shared Node Settings Variables Description Shared node type There are 2 types of shared nodes in Spline plus, Random: represented by a purple sphere, it is used when you want your followers to randomly pick the next branch to take Info: The random branch picking selection will be done between branches 4,3,5 for the example below, branches 4 and 5 are going to be excluded because of the wrong curvature they have, so the only choice left is branch with key 3 In this new example below the random branches picking is going to be done between branches 5,3,4. All branches curvatures are normal in this new case, so all the options are going to be taken into consideration. Defined: represented with a Blue sphere, this is used to predefine the branch you want your followers to take, You have 4 branches to setup, Left , Right, Forward and backward, if a field is left empty then branch picking choice will become random Ps: to add a branch index, you need to first select the branch from the scene view then click on , the branch key will be inserted automatically into the text box.","title":"Node"},{"location":"SplinePlus/Node/#node-points","text":"Node points area is used to control the node position and its handles manually from the editor, this can be useful in case you\u2019re seeking precision in positioning your nodes,","title":"Node Points"},{"location":"SplinePlus/Node/#node-settings","text":"Variables Description Normal Normal value of the selected node, the value is set to zero by default, it varies from -180 to 180 To visualize the normals in your scene view, you have to enable \u201cHelpers\u201d which can be found in the \"Settings\" section, Speed Speed value of the selected node The speed variation [0,100] is represented by a spline color variation, red color means that the speed is minimum at that position, if color is green or gray then speed is maximum Node type The selected node type, Free ,Smooth, broken","title":"Node Settings"},{"location":"SplinePlus/Node/#shared-node-settings","text":"Variables Description Shared node type There are 2 types of shared nodes in Spline plus, Random: represented by a purple sphere, it is used when you want your followers to randomly pick the next branch to take Info: The random branch picking selection will be done between branches 4,3,5 for the example below, branches 4 and 5 are going to be excluded because of the wrong curvature they have, so the only choice left is branch with key 3 In this new example below the random branches picking is going to be done between branches 5,3,4. All branches curvatures are normal in this new case, so all the options are going to be taken into consideration. Defined: represented with a Blue sphere, this is used to predefine the branch you want your followers to take, You have 4 branches to setup, Left , Right, Forward and backward, if a field is left empty then branch picking choice will become random Ps: to add a branch index, you need to first select the branch from the scene view then click on , the branch key will be inserted automatically into the text box.","title":"Shared Node Settings"},{"location":"SplinePlus/NodeEdit/","text":"Spline editing actions are done through the items menu, right click in your scene view to open the items menu. Add Forks if spline plus has zero branches then a new branch is created automatically and a new node is added to the newly created branch at the mouse position click, if both branch forks are welded then the action of adding a new node is aborted, if both branch forks are unwelded, then the bridge with the newly created node is established with the branch fork with less distance to the mouse position click, if the branch has only one unwelded fork then the connection is established with the unwelded fork, Middle Hold \"Shift key\" on the keyboard , you will get a \u201cyellow\u201d sphere traveling along the selected branch based on mouse position, once you are on the desirable position, perform a mouse click to add your node. Delete To delete a node there are two methods, - First one is by using the shortcut key \"Back space\" while selecting the node you want to delete. - Second is through items menu Hide/Unhide handles Hide/Unhide nodes handles this can be done through Node= Hide/Unhide handles or using the shortcut key \"H\" Chamfer Chamfer regular and shared nodes, once this action is triggered you get a message box to control your smooth radius, Flip Handles This flips the handles position of the selected node, this is very useful when drawing your spline, it helps you get the desirable spline shape you want.","title":"Node"},{"location":"SplinePlus/NodeEdit/#add","text":"","title":"Add"},{"location":"SplinePlus/NodeEdit/#forks","text":"if spline plus has zero branches then a new branch is created automatically and a new node is added to the newly created branch at the mouse position click, if both branch forks are welded then the action of adding a new node is aborted, if both branch forks are unwelded, then the bridge with the newly created node is established with the branch fork with less distance to the mouse position click, if the branch has only one unwelded fork then the connection is established with the unwelded fork,","title":"Forks"},{"location":"SplinePlus/NodeEdit/#middle","text":"Hold \"Shift key\" on the keyboard , you will get a \u201cyellow\u201d sphere traveling along the selected branch based on mouse position, once you are on the desirable position, perform a mouse click to add your node.","title":"Middle"},{"location":"SplinePlus/NodeEdit/#delete","text":"To delete a node there are two methods, - First one is by using the shortcut key \"Back space\" while selecting the node you want to delete. - Second is through items menu","title":"Delete"},{"location":"SplinePlus/NodeEdit/#hideunhide-handles","text":"Hide/Unhide nodes handles this can be done through Node= Hide/Unhide handles or using the shortcut key \"H\"","title":"Hide/Unhide handles"},{"location":"SplinePlus/NodeEdit/#chamfer","text":"Chamfer regular and shared nodes, once this action is triggered you get a message box to control your smooth radius,","title":"Chamfer"},{"location":"SplinePlus/NodeEdit/#flip-handles","text":"This flips the handles position of the selected node, this is very useful when drawing your spline, it helps you get the desirable spline shape you want.","title":"Flip Handles"},{"location":"SplinePlus/SceneViewUI/","text":"Debuging Area Used to display the data you are currently selecting Variables Description Connected branches The branch keys connected to the selected node in case one is selected Branch The selected branch key in the branches dictionary Node The node index in the nodes list of the selected branch is displayed on top like image bellow This also helps determine the direction of the branch, the beginning of the branch is the node with index zero, the end of the branch is the node with the highest index.","title":"Scene view UI"},{"location":"SplinePlus/SceneViewUI/#debuging-area","text":"Used to display the data you are currently selecting Variables Description Connected branches The branch keys connected to the selected node in case one is selected Branch The selected branch key in the branches dictionary Node The node index in the nodes list of the selected branch is displayed on top like image bellow This also helps determine the direction of the branch, the beginning of the branch is the node with index zero, the end of the branch is the node with the highest index.","title":"Debuging Area"},{"location":"SplinePlus/Settings/","text":"Variables Description Reference axis The spline normals default direction, this is used to change the reference normal direction of the spline, it is very useful when changing the scene view mode Smoothness This changes the number of vertices between two nodes, it controls the smoothness of your spline curve. Interpolate rotation this smooths rotation when path following if set to true. Constant speed Enable/disable speed variation on nodes. set this to Off if you are not using node speed variation Gizmos This hides and unhides the gizmos in your scene view. Gizmos size This appears only if gizmos is set to On, This allows you to control the size of the gizmos in you scene view . Helpers This hides and unhides the normals tangents representation in the scene view Helpers size This appears only if helpers is set to \"On\", this controls the helpers size. Node type the default node type you want to use when adding new nodes. Secondary handles This hides and unhides secondary handles of the selected node. Gizmo colors Editor node gizmo colors can be changed from here","title":"Settings"},{"location":"SplinePlus/Shortcuts/","text":"\u201cBackSpace key\u201d Delete the selected node \u201cZ key\u201d Focus scene view camera on the selected node \u201cH key\u201d Hide/Unhide node handles \u201cR key\u201d Reverse branch direction \u201cEscape key\u201d Reset editing mode to default \"selection\"","title":"Shortcuts"},{"location":"SplinePlus/SplineEdit/","text":"Spline editing actions are done through the items menu, right click in your scene view to open the items menu. Snap To Grid Snap all nodes and their handles to Unity grid (3D/2D) based on the view you are using. Pivot Editing Edit the pivot of your spline plus game object.","title":"Spline"},{"location":"SplinePlus/SplineEdit/#snap-to-grid","text":"Snap all nodes and their handles to Unity grid (3D/2D) based on the view you are using.","title":"Snap To Grid"},{"location":"SplinePlus/SplineEdit/#pivot-editing","text":"Edit the pivot of your spline plus game object.","title":"Pivot Editing"},{"location":"SplinePlus/ToolBar/","text":"Variables Description Import Import a \".SP\" file Export Export spline data in a \".SP\" file Append Append a \".SP\" file with the current spline data, this can be used as an \"Attach\" action which can help quickly build splines with repeated patterns Documentation Open documentation website","title":"ToolBar"},{"location":"SplinePlus/API/Index/","text":"Spline Plus Create Data Branches Close Smoothness Reference Axis Shared Nodes Nodes Node Create Selected Position Handles Position Remove Duplicate Type Shared Type Speed Normal Is Shared Connected Branches Chamfer Flip Handles Branch Create Selected Add Node To Branch Delete Break Merge Reverse Length Nodes Vertices Normals Tangents Follower Game Object Branch Speed Distance Animation State Animation Type","title":"API"},{"location":"SplinePlus/API/Index/#spline-plus","text":"Create Data Branches Close Smoothness Reference Axis Shared Nodes Nodes","title":"Spline Plus"},{"location":"SplinePlus/API/Index/#node","text":"Create Selected Position Handles Position Remove Duplicate Type Shared Type Speed Normal Is Shared Connected Branches Chamfer Flip Handles","title":"Node"},{"location":"SplinePlus/API/Index/#branch","text":"Create Selected Add Node To Branch Delete Break Merge Reverse Length Nodes Vertices Normals Tangents","title":"Branch"},{"location":"SplinePlus/API/Index/#follower","text":"Game Object Branch Speed Distance Animation State Animation Type","title":"Follower"},{"location":"SplinePlus/API/Branch/Add_Node_To_Branch/","text":"Begining Add a node at the beginning of a branch, Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored. public static void Branch_Add_Node_Beginning ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the beginning of branch with key 4 SplinePlusAPI . Branch_Add_Node_Beginning ( sPData , 4 , nodeToAdd ); End Add a node at the end of a branch, Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored. public static void Branch_Add_Node_End ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the end of branch with key 4 SplinePlusAPI . Branch_Add_Node_End ( sPData , 4 , node ); Index Add a node at an index in the nodes list, public static void Branch_Add_Node_At_Index ( SPData sPData , int branchKey , Node nodeToAdd , int index ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node at index 3 in the nodes list of branch with key 4 SplinePlusAPI . Branch_Add_Node_At_Index ( sPData , 4 , node , 3 );","title":"Add Node To Branch"},{"location":"SplinePlus/API/Branch/Add_Node_To_Branch/#begining","text":"Add a node at the beginning of a branch, Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored. public static void Branch_Add_Node_Beginning ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the beginning of branch with key 4 SplinePlusAPI . Branch_Add_Node_Beginning ( sPData , 4 , nodeToAdd );","title":"Begining"},{"location":"SplinePlus/API/Branch/Add_Node_To_Branch/#end","text":"Add a node at the end of a branch, Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored. public static void Branch_Add_Node_End ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the end of branch with key 4 SplinePlusAPI . Branch_Add_Node_End ( sPData , 4 , node );","title":"End"},{"location":"SplinePlus/API/Branch/Add_Node_To_Branch/#index","text":"Add a node at an index in the nodes list, public static void Branch_Add_Node_At_Index ( SPData sPData , int branchKey , Node nodeToAdd , int index ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node at index 3 in the nodes list of branch with key 4 SplinePlusAPI . Branch_Add_Node_At_Index ( sPData , 4 , node , 3 );","title":"Index"},{"location":"SplinePlus/API/Branch/Branch_Length/","text":"Get the length of the branch provided. public static float Branch_Get_Length ( SPData sPData , int branchKey ) Example: //The length of the branch with key 2 var branchLength = SplinePlusAPI . Branch_Get_Length ( sPData , 2 );","title":"Branch Length"},{"location":"SplinePlus/API/Branch/Branch_Nodes/","text":"Get the branch nodes list public static List Node Branch_Get_Nodes ( SPData sPData , int branchKey ) Example: //Get the nodes list of branch with key 2 var branchNodes = SplinePlusAPI . Branch_Get_Nodes ( sPData , 2 );","title":"Branch Nodes"},{"location":"SplinePlus/API/Branch/Branch_Normals/","text":"Get the branch normals List public static List Vector3 Branch_Get_Normals ( SPData sPData , int branchKey ) Example: //Get the normals list if branch with key 2 List Vector3 normals = SplinePlusAPI . Branch_Get_Normals ( sPData , 2 );","title":"Branch Normals"},{"location":"SplinePlus/API/Branch/Branch_Tangents/","text":"Get the branch Vertices List public static List Vector3 Branch_Get_Tangents ( SPData sPData , int branchKey ) Example: //Get the tangents list if branch with key 2 List Vectore3 tangents = SplinePlusAPI . Branch_Get_Tangents ( sPData , 2 );","title":"Branch Tangents"},{"location":"SplinePlus/API/Branch/Branch_Vertices/","text":"Get the branch Vertices List public static List Vector3 Branch_Get_Vertices ( SPData sPData , int branchKey ) Example: //Get the vertices list if branch with key 2 List Vector3 vertices = SplinePlusAPI . Branch_Get_Vertices ( sPData , 2 );","title":"Branch Vertices"},{"location":"SplinePlus/API/Branch/Break_Branch/","text":"Break the branch to two branches at the node provided, if the node provided is already shared then action will be ignored. public static void Branch_Break ( SPData sPData , Node node ) Example: // get the node of branch with key 2 and node index 3 var node = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //break branch at node SplinePlusAPI . Branch_Break ( sPData , node );","title":"Break Branch"},{"location":"SplinePlus/API/Branch/Create_Branch/","text":"Create a new branch at the node provided and return the branch key, public static int Branch_Create ( SPData sPData , Node originNode ) Example: //create 2 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( - 20 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 10 , 0 , 0 )); //create a new branch var branchKey = SplinePlusAPI . Branch_Create ( sPData ); // add nodes to the end of the branch SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node1 ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node2 );","title":"Create Branch"},{"location":"SplinePlus/API/Branch/Delete_Branch/","text":"Delete a branch from the branches dictionnary by providing the branch key. public static void Delete_Branch ( SPData sPData , int branchKey ) Example: //Delete branch with key 4 SplinePlusAPI . Delete_Branch ( sPData , 4 );","title":"Delete Branch"},{"location":"SplinePlus/API/Branch/Merge_Branch/","text":"Merge two branches togther. public static int Branch_Merge ( SPData sPData , int branchKey1 , int branchKey2 ) Example: //merge branch with key 2 and 1 together var newBranchKey = SplinePlusAPI . Branch_Merge ( sPData , 2 , 1 );","title":"Merge Branch"},{"location":"SplinePlus/API/Branch/Reverse_Branch/","text":"Reverse the branch direction. public static void Branch_Reverse ( SPData sPData , int branchKey ) Example: //Reverse the branch with key 2 SplinePlusAPI . Branch_Reverse ( sPData , 2 );","title":"Reverse Branch"},{"location":"SplinePlus/API/Branch/Selected_Branch/","text":"Get the selected branch in the unity editor public static Branch Branch_Selected ( this SPData sPData ) Example: //Get the branchSelected var selectedBranch = SplinePlusAPI . Branch_Selected ( sPData );","title":"Selected Branch"},{"location":"SplinePlus/API/Follower/Follower_Animation_State/","text":"Set Set follower animation state , Enable/Disable follower animation . public static void Follower_Set_AnimationState ( Follower follower , bool value ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation SplinePlusAPI . Follower_Set_AnimationState ( follower , false ); } Get Get follower animation state. public static bool Follower_Get_AnimationState ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; Debug . Log ( SplinePlusAPI . Follower_Get_AnimationState ( follower )); }","title":"Follower Animation State"},{"location":"SplinePlus/API/Follower/Follower_Animation_State/#set","text":"Set follower animation state , Enable/Disable follower animation . public static void Follower_Set_AnimationState ( Follower follower , bool value ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation SplinePlusAPI . Follower_Set_AnimationState ( follower , false ); }","title":"Set"},{"location":"SplinePlus/API/Follower/Follower_Animation_State/#get","text":"Get follower animation state. public static bool Follower_Get_AnimationState ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; Debug . Log ( SplinePlusAPI . Follower_Get_AnimationState ( follower )); }","title":"Get"},{"location":"SplinePlus/API/Follower/Follower_Animation_Type/","text":"Set Set the follower animation type, Auto: Move follower on spline branches with a defined speed. Keyboad: Move follower using keyboard inputs (Arrow keys). Scene view: Move follower on spline branches to the closest (scene view/game view) mouse click. public static void Follower_Set_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_Set_AnimationType ( follower , FollowerAnimation . Auto ); } Get Get the follower animation type, public static FollowerAnimation Follower_Get_AnimationType ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower animation type Debug . Log ( SplinePlusAPI . Follower_Get_AnimationType ( follower )); }","title":"Follower Animation Type"},{"location":"SplinePlus/API/Follower/Follower_Animation_Type/#set","text":"Set the follower animation type, Auto: Move follower on spline branches with a defined speed. Keyboad: Move follower using keyboard inputs (Arrow keys). Scene view: Move follower on spline branches to the closest (scene view/game view) mouse click. public static void Follower_Set_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_Set_AnimationType ( follower , FollowerAnimation . Auto ); }","title":"Set"},{"location":"SplinePlus/API/Follower/Follower_Animation_Type/#get","text":"Get the follower animation type, public static FollowerAnimation Follower_Get_AnimationType ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower animation type Debug . Log ( SplinePlusAPI . Follower_Get_AnimationType ( follower )); }","title":"Get"},{"location":"SplinePlus/API/Follower/Follower_Branch/","text":"Set Set the follower branch key. public static void Follower_Set_Branch ( Follower follower , int branchKey ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower branch key to 2 SplinePlusAPI . Follower_Set_Branch ( follower , 2 ); } Get Get the follower branch key. public static float Follower_Get_Branch ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower branch key Debug . Log ( SplinePlusAPI . Follower_Get_Branch ( follower )); }","title":"Follower Branch"},{"location":"SplinePlus/API/Follower/Follower_Branch/#set","text":"Set the follower branch key. public static void Follower_Set_Branch ( Follower follower , int branchKey ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower branch key to 2 SplinePlusAPI . Follower_Set_Branch ( follower , 2 ); }","title":"Set"},{"location":"SplinePlus/API/Follower/Follower_Branch/#get","text":"Get the follower branch key. public static float Follower_Get_Branch ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower branch key Debug . Log ( SplinePlusAPI . Follower_Get_Branch ( follower )); }","title":"Get"},{"location":"SplinePlus/API/Follower/Follower_Distance/","text":"Set Set the follower distance on the branch. public static void Follower_Set_Distance ( Follower follower , float progress ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower distance to 0 SplinePlusAPI . Follower_Set_Distance ( follower , 0 ); } Get Get the follower distance on the branch. public static float Follower_Get_Distance ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower distance Debug . Log ( SplinePlusAPI . Follower_Get_Distance ( follower )); }","title":"Follower Distance"},{"location":"SplinePlus/API/Follower/Follower_Distance/#set","text":"Set the follower distance on the branch. public static void Follower_Set_Distance ( Follower follower , float progress ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower distance to 0 SplinePlusAPI . Follower_Set_Distance ( follower , 0 ); }","title":"Set"},{"location":"SplinePlus/API/Follower/Follower_Distance/#get","text":"Get the follower distance on the branch. public static float Follower_Get_Distance ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower distance Debug . Log ( SplinePlusAPI . Follower_Get_Distance ( follower )); }","title":"Get"},{"location":"SplinePlus/API/Follower/Follower_Game_Object/","text":"Set Set the follower gameObject. public static void Follower_Set_GameObject ( Follower follower , GameObject followerGo ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower gameObject SplinePlusAPI . Follower_Set_GameObject ( follower , followerGo ); } Get Get the follower gameObject. public static GameObject Follower_Get_GameObject ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower gameObject var followerGameObject = SplinePlusAPI . Follower_Set_GameObject ( follower ); }","title":"Follower Game Object"},{"location":"SplinePlus/API/Follower/Follower_Game_Object/#set","text":"Set the follower gameObject. public static void Follower_Set_GameObject ( Follower follower , GameObject followerGo ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower gameObject SplinePlusAPI . Follower_Set_GameObject ( follower , followerGo ); }","title":"Set"},{"location":"SplinePlus/API/Follower/Follower_Game_Object/#get","text":"Get the follower gameObject. public static GameObject Follower_Get_GameObject ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower gameObject var followerGameObject = SplinePlusAPI . Follower_Set_GameObject ( follower ); }","title":"Get"},{"location":"SplinePlus/API/Follower/Follower_Speed/","text":"Set Set the follower speed. public static void Follower_Set_Speed ( Follower follower , float speed ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Set_Speed ( follower , 7 ); } Get Get the follower speed. public static float Follower_Get_Speed ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower speed Debug . Log ( SplinePlusAPI . Follower_Get_Speed ( follower )); }","title":"Follower Speed"},{"location":"SplinePlus/API/Follower/Follower_Speed/#set","text":"Set the follower speed. public static void Follower_Set_Speed ( Follower follower , float speed ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Set_Speed ( follower , 7 ); }","title":"Set"},{"location":"SplinePlus/API/Follower/Follower_Speed/#get","text":"Get the follower speed. public static float Follower_Get_Speed ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower speed Debug . Log ( SplinePlusAPI . Follower_Get_Speed ( follower )); }","title":"Get"},{"location":"SplinePlus/API/Node/Chamfer_Node/","text":"Chamfer the node provided The radius value varies from [0,1]. \"removeNodeImmediatly\" should be set to true if this is used outside editor. public static void Node_Chamfer ( SPData sPData , Node node , float radius , bool removeNodeImmediatly = false ) Example: //get all the shared nodes of a sPData object var sharedNodes = SplinePlusAPI . Get_All_Shared_Nodes ( sPData ); var node = sharedNodes [ 0 ] ; //Smooth the first shared node in the shared nodes list SplinePlusAPI . Node_Chamfer ( sPData , node , 0.2f , true );","title":"Chamfer Node"},{"location":"SplinePlus/API/Node/Create_Node/","text":"Local Space Create a node object in a Vector3 local space. public static Node Node_Create_Local ( SPData sPData , Vector3 nodeLocalPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(1,1,1) local space var node = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 1 , 1 , 1 )); ## World Space Create a node object in a Vector3 world space. public static Node Node_Create_World ( SPData sPData , Vector3 nodeWorldPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(10,20,1) world space var node = SplinePlusAPI . Node_Create_World ( sPData , new Vector3 ( 10 , 20 , 1 )); Create Node At Distance Create a node on a defined branch at defined distance and return the node created. public static Node CreateNode_At_Distance ( SPData sPData , int branchKey , float Distance ) Example: //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 40 , 0 , 0 )); //create 3 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 0 , 0 , 0 )); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node1 ); var node2 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 10 , 0 , 0 )); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node2 ); var node3 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 20 , 0 , 10 )); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node3 ); var branchLength = SplinePlusAPI . Branch_Length ( sPData , branchKey ); //create a node on the branch defined at a distance of half of branchLength SplinePlusAPI . CreateNode_At_Distance ( sPData , branchKey , branchDistance * 0.5f );","title":"Create Node"},{"location":"SplinePlus/API/Node/Create_Node/#local-space","text":"Create a node object in a Vector3 local space. public static Node Node_Create_Local ( SPData sPData , Vector3 nodeLocalPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(1,1,1) local space var node = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 1 , 1 , 1 )); ## World Space Create a node object in a Vector3 world space. public static Node Node_Create_World ( SPData sPData , Vector3 nodeWorldPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(10,20,1) world space var node = SplinePlusAPI . Node_Create_World ( sPData , new Vector3 ( 10 , 20 , 1 ));","title":"Local Space"},{"location":"SplinePlus/API/Node/Create_Node/#create-node-at-distance","text":"Create a node on a defined branch at defined distance and return the node created. public static Node CreateNode_At_Distance ( SPData sPData , int branchKey , float Distance ) Example: //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 40 , 0 , 0 )); //create 3 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 0 , 0 , 0 )); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node1 ); var node2 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 10 , 0 , 0 )); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node2 ); var node3 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 20 , 0 , 10 )); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node3 ); var branchLength = SplinePlusAPI . Branch_Length ( sPData , branchKey ); //create a node on the branch defined at a distance of half of branchLength SplinePlusAPI . CreateNode_At_Distance ( sPData , branchKey , branchDistance * 0.5f );","title":"Create Node At Distance"},{"location":"SplinePlus/API/Node/Node_Connected_Branches/","text":"Return the node connected branches keys list. public static List int Node_Get_Connected_Branches ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; var connectedBranches = SplinePlusAPI . Node_Get_Connected_Branches ( node ); Debug . Log ( Connected branches keys : ); for ( int i = 0 ; i connectedBranches . Count ; i ++ ){ Debug . Log ( connectedBranches [ i ] ); }","title":"Node Connected Branches"},{"location":"SplinePlus/API/Node/Node_Duplicate/","text":"Duplicate a node object and return the duplicate, public static Node Node_Duplicate ( SPData sPData , Node originNode ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Duplicate the node and catch the duplicate in a variable Node duplicateNode = SplinePlusAPI . Node_Duplicate ( SPData , node );","title":"Node Duplicate"},{"location":"SplinePlus/API/Node/Node_Flip_Handles/","text":"Flip the node handles, This can be used to tweak the curvature of the node provided, Instead of providing the node, you need to provide two variants, the branch key and the node index in the nodes list of the branch. public static void Node_FlipHandles ( SPData sPData , int BranchKey , int NodeIndex ) Example: //Flip the handles of the second node of the branch with key 0 SplinePlusAPI . Node_FlipHandles ( sPData , 0 , 2 )","title":"Node Flip Handles"},{"location":"SplinePlus/API/Node/Node_Handles_Position/","text":"Handles Position Set Set the node handles position, The handles \"Point1 Point2\" are transforms children of the node transform \"Point\", The handles positions provided should be in local space, public static void Node_Handles_Set_Position ( Node node , Vector3 point1LocalPos , Vector3 point2LocalPos ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 point1LocPos = new Vector3 ( 10 , 0 , 0 ); Vector3 point2LocPos = new Vector3 ( - 10 , 0 , 0 ); SplinePlusAPI . Node_Handles_Set_Position ( node , point1LocPos , point2LocPos ); ### Get Get the node handles position, The handles \"Point1 Point2\" are transforms children of the node transform \"Point\", The handles positions provided should be in local space, #### Point1 public static Vector3 Node_Get_Point1_Position ( Node node ) Example: //Get node point1 local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodePoint1LocalPosition = SplinePlusAPI . Node_Get_Point1_Position ( node ); #### Point2 public static Vector3 Node_Get_Point2_Position ( Node node ) Example: //Get node point2 local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodePoint2LocalPosition = SplinePlusAPI . Node_Get_Point2_Position ( node );","title":"Node Handles Position"},{"location":"SplinePlus/API/Node/Node_Handles_Position/#handles-position","text":"","title":"Handles Position"},{"location":"SplinePlus/API/Node/Node_Handles_Position/#set","text":"Set the node handles position, The handles \"Point1 Point2\" are transforms children of the node transform \"Point\", The handles positions provided should be in local space, public static void Node_Handles_Set_Position ( Node node , Vector3 point1LocalPos , Vector3 point2LocalPos ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 point1LocPos = new Vector3 ( 10 , 0 , 0 ); Vector3 point2LocPos = new Vector3 ( - 10 , 0 , 0 ); SplinePlusAPI . Node_Handles_Set_Position ( node , point1LocPos , point2LocPos ); ### Get Get the node handles position, The handles \"Point1 Point2\" are transforms children of the node transform \"Point\", The handles positions provided should be in local space, #### Point1 public static Vector3 Node_Get_Point1_Position ( Node node ) Example: //Get node point1 local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodePoint1LocalPosition = SplinePlusAPI . Node_Get_Point1_Position ( node ); #### Point2 public static Vector3 Node_Get_Point2_Position ( Node node ) Example: //Get node point2 local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodePoint2LocalPosition = SplinePlusAPI . Node_Get_Point2_Position ( node );","title":"Set"},{"location":"SplinePlus/API/Node/Node_Is_Shared/","text":"Check if node is shared or not. public static bool Node_Is_Shared ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; Debug . Log ( SplinePlusAPI . Node_Is_Shared ( node ););","title":"Node Is Shared"},{"location":"SplinePlus/API/Node/Node_Normal/","text":"Set Set the node normal angle. This is a degree \u00b0 value that varies from -180 to 180 public static void Node_Set_Normal ( SPData sPData , Node node , float NormalFactor ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node normal angle to 90 SplinePlusAPI . Node_Set_Normal ( SPData , node , 90 ); Get Get the node normal angle. public static float Node_Get_Normal ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node normal value var nodeNormal = SplinePlusAPI . Node_Get_Normal ( node );","title":"Node Normal"},{"location":"SplinePlus/API/Node/Node_Normal/#set","text":"Set the node normal angle. This is a degree \u00b0 value that varies from -180 to 180 public static void Node_Set_Normal ( SPData sPData , Node node , float NormalFactor ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node normal angle to 90 SplinePlusAPI . Node_Set_Normal ( SPData , node , 90 );","title":"Set"},{"location":"SplinePlus/API/Node/Node_Normal/#get","text":"Get the node normal angle. public static float Node_Get_Normal ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node normal value var nodeNormal = SplinePlusAPI . Node_Get_Normal ( node );","title":"Get"},{"location":"SplinePlus/API/Node/Node_Position/","text":"Local Space Get Get the node local position, public static Vector3 Node_Get_Position_Local ( Node node ) Example: //Get node local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodeLocalPosition = SplinePlusAPI . Node_Get_Position_Local ( node ); Set Set the node local position, public static void Node_Set_Position_Local ( Node node , Vector3 nodeLocalPos ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newLocalPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_Set_Position_Local ( node , newLocalPosition ); World Space Set Set the node world position, public static void Node_Set_Position_World ( Node node , Vector3 nodeWorldPos ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newWorldPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_Set_Position_World ( node , newWorldPosition ); Get Get the node world position, public static Vector3 Node_Get_Position_World ( Node node ) Example: //Get node world position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodeWorldPosition = SplinePlusAPI . Node_Get_Position_World ( node );","title":"Node Position"},{"location":"SplinePlus/API/Node/Node_Position/#local-space","text":"","title":"Local Space"},{"location":"SplinePlus/API/Node/Node_Position/#get","text":"Get the node local position, public static Vector3 Node_Get_Position_Local ( Node node ) Example: //Get node local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodeLocalPosition = SplinePlusAPI . Node_Get_Position_Local ( node );","title":"Get"},{"location":"SplinePlus/API/Node/Node_Position/#set","text":"Set the node local position, public static void Node_Set_Position_Local ( Node node , Vector3 nodeLocalPos ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newLocalPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_Set_Position_Local ( node , newLocalPosition );","title":"Set"},{"location":"SplinePlus/API/Node/Node_Position/#world-space","text":"","title":"World  Space"},{"location":"SplinePlus/API/Node/Node_Position/#set_1","text":"Set the node world position, public static void Node_Set_Position_World ( Node node , Vector3 nodeWorldPos ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newWorldPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_Set_Position_World ( node , newWorldPosition );","title":"Set"},{"location":"SplinePlus/API/Node/Node_Position/#get_1","text":"Get the node world position, public static Vector3 Node_Get_Position_World ( Node node ) Example: //Get node world position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodeWorldPosition = SplinePlusAPI . Node_Get_Position_World ( node );","title":"Get"},{"location":"SplinePlus/API/Node/Node_Remove/","text":"Delete a (shared/simple) node object. public static void Node_Remove ( SPData sPData , Node nodeToDelete ) Example: //delete the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; SplinePlusAPI . Node_Remove ( sPData , node );","title":"Node Remove"},{"location":"SplinePlus/API/Node/Node_Shared_Type/","text":"Set Change the shared node type, Random: pick a branch randomly when follower is on the shared node Defined: define a branch for the follower to take when it is on the shared node , ( Optional ) the left, right, forward, backward are branches keys to define , if no value is defined for these variables, then branch picking decision will become random. If Animation type is set to \"Auto\" and type is set to Defined then the only branch options that will be taken into consideration are Forward and Backward branch keys, public static void Node_Set_Shared_Type ( Node node , SharedNodeType sharedNodeType = SharedNodeType . Random , int left = - 1 , int right = - 1 , int forward = - 1 , int backward = - 1 ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to defined and set the forward and backward options, left and right are not taken into consideration if animation type is auto SplinePlusAPI . Node_Shared_Type ( SPData , node , SharedNodeType . Defined , - 1 , - 1 , 3 , 2 ); ### Get public static SharedNodeType Node_Get_Shared_Type ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //get the shared node type var sharedNodeType = SplinePlusAPI . Node_Get_Shared_Type ( node ); Debug . Log ( sharedNodeType );","title":"Node Shared Type"},{"location":"SplinePlus/API/Node/Node_Shared_Type/#set","text":"Change the shared node type, Random: pick a branch randomly when follower is on the shared node Defined: define a branch for the follower to take when it is on the shared node , ( Optional ) the left, right, forward, backward are branches keys to define , if no value is defined for these variables, then branch picking decision will become random. If Animation type is set to \"Auto\" and type is set to Defined then the only branch options that will be taken into consideration are Forward and Backward branch keys, public static void Node_Set_Shared_Type ( Node node , SharedNodeType sharedNodeType = SharedNodeType . Random , int left = - 1 , int right = - 1 , int forward = - 1 , int backward = - 1 ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to defined and set the forward and backward options, left and right are not taken into consideration if animation type is auto SplinePlusAPI . Node_Shared_Type ( SPData , node , SharedNodeType . Defined , - 1 , - 1 , 3 , 2 ); ### Get public static SharedNodeType Node_Get_Shared_Type ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //get the shared node type var sharedNodeType = SplinePlusAPI . Node_Get_Shared_Type ( node ); Debug . Log ( sharedNodeType );","title":"Set"},{"location":"SplinePlus/API/Node/Node_Speed/","text":"Set Set the node speed value, public static void Node_Set_Speed ( SPData sPData , Node node , float speed ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node speed to 100 SplinePlusAPI . Node_Set_Speed ( SPData , node , 100 ); ### Get Get the node speed value, public static float Node_Get_Speed ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get the node speed var nodeSpeed = SplinePlusAPI . Node_Get_Speed ( node );","title":"Node Speed"},{"location":"SplinePlus/API/Node/Node_Speed/#set","text":"Set the node speed value, public static void Node_Set_Speed ( SPData sPData , Node node , float speed ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node speed to 100 SplinePlusAPI . Node_Set_Speed ( SPData , node , 100 ); ### Get Get the node speed value, public static float Node_Get_Speed ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get the node speed var nodeSpeed = SplinePlusAPI . Node_Get_Speed ( node );","title":"Set"},{"location":"SplinePlus/API/Node/Node_Type/","text":"Set Change the node bezier curvature type, newNodeType is an enum, options available are smooth, free, broken public static void Node_Set_Type ( SPData sPData , Node node , NodeType newNodeType , bool updateSpline = true ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Set_Type ( SPData , node , NodeType . Smooth ); ### Get public static NodeType Node_Get_Type ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node type var nodeType = SplinePlusAPI . Node_Get_Type ( node ); Debug . Log ( nodeType );","title":"Node Type"},{"location":"SplinePlus/API/Node/Node_Type/#set","text":"Change the node bezier curvature type, newNodeType is an enum, options available are smooth, free, broken public static void Node_Set_Type ( SPData sPData , Node node , NodeType newNodeType , bool updateSpline = true ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Set_Type ( SPData , node , NodeType . Smooth ); ### Get public static NodeType Node_Get_Type ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node type var nodeType = SplinePlusAPI . Node_Get_Type ( node ); Debug . Log ( nodeType );","title":"Set"},{"location":"SplinePlus/API/Node/Selected_Node/","text":"Get the selected node in the unity Editor public static Node Node_Selected ( this SPData sPData ) Example: //get the selected node var selectedNode = SplinePlusAPI . Node_Selected ( sPData );","title":"Selected Node"},{"location":"SplinePlus/API/SplinePlus/Create_SplinePlus/","text":"Create a Spline Plus game object at a Vector3 position and return the SPData object created, public static SPData SplinePlus_Create ( Vector3 position ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 ));","title":"Create SplinePlus"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_Branches/","text":"Get the branches dictionary of an SPData object, public static Dictionary int , Branch SplinePlus_Get_Branches_List ( SPData sPData ) Example: //Get the SPData object var sPData = GetComponent SplinePlus (). SPData ; //Get the branches dictionary of the SPData object var branches = SplinePlusAPI . SplinePlus_Get_Branches_List ( sPData ); // Print the branch keys foreach ( var branch in branches ){ Debug . Log ( branch key= + branch . Key ); }","title":"SplinePlus Branches"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_Close/","text":"Close the SplinePlus shape, This will create another branch that will connect the already existing branch forks. For this to work, the SPData object should contain already one branch created with a minimum of 2 nodes. public static void SplinePlus_Close ( SPData sPData ) Example: //create the game object that will hold the spline plus component and catch the SPData to use further var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( - 10 , 0 , 0 )); //create the 2 nodes var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( - 10 , 0 , 0 )); //Create a branch and the node1 and node2 to the branch created var branchKey = SplinePlusAPI . Branch_Create ( sPData ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node1 ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node2 ); //change the node handles position SplinePlusAPI . Node_Handles_SetPosition ( node1 , new Vector3 ( 0 , 0 , 20 ), new Vector3 ( 0 , 0 , - 20 )); SplinePlusAPI . Node_Handles_SetPosition ( node2 , new Vector3 ( 0 , 0 , 20 ), new Vector3 ( 0 , 0 , - 20 )); //close the spline shape SplinePlusAPI . SplinePlus_Close ( sPData );","title":"SplinePlus Close"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_Data/","text":"SPData is a data class for the monobehaviour Spline Plus, You can get the SPData if you already have your spline plus game object in your scene hierarchy like bellow. SPData sPData ; public void Start (){ sPData = GetComponent SplinePlus (). SPData ; } When using the Spline plus API, this is how to get the SPData object. SPData sPData ; public void Start (){ sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); }","title":"SplinePlus Data"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_Nodes/","text":"Return a list of all the nodes of the SPData object provided, public static List Node SplinePlus_Get_Nodes ( SPData sPData ) Example: List Node NodesList = SplinePlusAPI . SplinePlus_Get_Nodes ( sPData );","title":"SplinePlus Nodes"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_ReferenceAxis/","text":"Set Set Spline plus object reference axis. public static void SplinePlus_Set_Reference_Axis ( this SPData sPData , RefAxis axis ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus object reference axis to Y SplinePlusAPI . SplinePlus_Set_Reference_Axis ( sPData , RefAxis . Y ) ## Get Get Spline plus object reference axis. java public static void SplinePlus_Get_Reference_Axis(this SPData sPData ) Example: ```java // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI.SplinePlus_Create(new Vector3(0,0,0)); Debug.Log(SplinePlusAPI.SplinePlus_Set_Reference_Axis(sPData)); ```","title":"SplinePlus ReferenceAxis"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_ReferenceAxis/#set","text":"Set Spline plus object reference axis. public static void SplinePlus_Set_Reference_Axis ( this SPData sPData , RefAxis axis ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus object reference axis to Y SplinePlusAPI . SplinePlus_Set_Reference_Axis ( sPData , RefAxis . Y ) ## Get Get Spline plus object reference axis. java public static void SplinePlus_Get_Reference_Axis(this SPData sPData ) Example: ```java // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI.SplinePlus_Create(new Vector3(0,0,0)); Debug.Log(SplinePlusAPI.SplinePlus_Set_Reference_Axis(sPData)); ```","title":"Set"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_Shared_Nodes/","text":"Return a list of all the shared nodes of the SPData object provided, public static List Node SplinePlus_Get_All_Shared_Nodes ( SPData sPData ) Example: List Node sharedNodesList = SplinePlusAPI . SplinePlus_Get_All_Shared_Nodes ( sPData );","title":"SplinePlus Shared Nodes"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_Smoothness/","text":"Set Set Spline plus smoothness value. public static void SplinePlus_Set_Smoothness ( SPData sPData , int smoothness ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus smoothness to 15 SplinePlusAPI . SplinePlus_Set_Smoothness ( sPData , 15 ) ## Get Get Spline plus smoothness value. java public static int SplinePlus_Get_Smoothness(SPData sPData ) Example: ```java // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI.SplinePlus_Create(new Vector3(0,0,0)); Debug.Log(SplinePlusAPI.SplinePlus_Get_Smoothness(sPData)); ```","title":"SplinePlus Smoothness"},{"location":"SplinePlus/API/SplinePlus/SplinePlus_Smoothness/#set","text":"Set Spline plus smoothness value. public static void SplinePlus_Set_Smoothness ( SPData sPData , int smoothness ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus smoothness to 15 SplinePlusAPI . SplinePlus_Set_Smoothness ( sPData , 15 ) ## Get Get Spline plus smoothness value. java public static int SplinePlus_Get_Smoothness(SPData sPData ) Example: ```java // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI.SplinePlus_Create(new Vector3(0,0,0)); Debug.Log(SplinePlusAPI.SplinePlus_Get_Smoothness(sPData)); ```","title":"Set"},{"location":"SplineTrains/Inspector/","text":"Train follower Inspector Train wagons List is where you get to define your train wagons game objects. Variables Description On/Off switch Enable/Disable train follower animation. game object slots Train wagons game objects, \"Event\" button This opens the Train Events window, Train Settings This shows two sections, settings for the train and settings for the wagon selected from the wagons list above. Wagon Variables Description Distance The current distance of the wagon on the branch, the max is the length of the branch. Position Translation of the wagon with a button to switch between World and local space. Rotation Rotation of the wagon, with a button to turn Rotation On/Off in case this was needed. Train Variables Description Branch key the current branch key the train wagons are on, To set a branch key for the train's wagons, select the branch from your scene view then click on Distance in case you want the wagons to be placed with equal distance from each other then use this instead of going through each wagon distance individually Speed The speed of the train. Full Speed Time The time it takes the follower to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Animation type Variables Description Auto Animated move your train with a defined speed along the spline. Keyboard Input Move your train using keyboard inputs, Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on train speed\u201d. brakes force will impact the train speed as its value goes up, Flip direction : this will allow you to keep the train forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Keys : the keys used to control the train when animation type is set to keyboard instead of Auto animation.","title":"Inspector"},{"location":"SplineTrains/Inspector/#train-follower-inspector","text":"Train wagons List is where you get to define your train wagons game objects. Variables Description On/Off switch Enable/Disable train follower animation. game object slots Train wagons game objects, \"Event\" button This opens the Train Events window,","title":"Train follower Inspector"},{"location":"SplineTrains/Inspector/#train-settings","text":"This shows two sections, settings for the train and settings for the wagon selected from the wagons list above.","title":"Train Settings"},{"location":"SplineTrains/Inspector/#wagon","text":"Variables Description Distance The current distance of the wagon on the branch, the max is the length of the branch. Position Translation of the wagon with a button to switch between World and local space. Rotation Rotation of the wagon, with a button to turn Rotation On/Off in case this was needed.","title":"Wagon"},{"location":"SplineTrains/Inspector/#train","text":"Variables Description Branch key the current branch key the train wagons are on, To set a branch key for the train's wagons, select the branch from your scene view then click on Distance in case you want the wagons to be placed with equal distance from each other then use this instead of going through each wagon distance individually Speed The speed of the train. Full Speed Time The time it takes the follower to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation.","title":"Train"},{"location":"SplineTrains/Inspector/#animation-type","text":"Variables Description Auto Animated move your train with a defined speed along the spline. Keyboard Input Move your train using keyboard inputs, Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on train speed\u201d. brakes force will impact the train speed as its value goes up, Flip direction : this will allow you to keep the train forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Keys : the keys used to control the train when animation type is set to keyboard instead of Auto animation.","title":"Animation type"}]}