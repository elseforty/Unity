{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unity3D Spline Plus Unreal Engine Spline Plus","title":"Home"},{"location":"#unity3d","text":"Spline Plus","title":"Unity3D"},{"location":"#unreal-engine","text":"Spline Plus","title":"Unreal Engine"},{"location":"Contact/","text":"Send email Twitter Unity Forum","title":"Coordinates"},{"location":"API/Index/","text":"Spline Plus Create Data Branches Smoothness Reference Axis Shared Nodes Nodes Node Create Selected Position Handles Position Remove Fuse Diffuse Compound Duplicate Type Speed Normal Is Shared Connected Branches Flip Handles Branch Create Selected Add Node To Branch Delete Break Merge Reverse Length Nodes Vertices Normals Tangents Follower Game Object Branch Speed Distance Animation State Animation Type Deformed Mesh Add Update Processing Prefab Mesh Create Game Object Deformation Type Mesh Trim Mirror Material Offset Rotation Scale Spacing Tiling Placement","title":"API"},{"location":"API/Index/#spline-plus","text":"Create Data Branches Smoothness Reference Axis Shared Nodes Nodes","title":"Spline Plus"},{"location":"API/Index/#node","text":"Create Selected Position Handles Position Remove Fuse Diffuse Compound Duplicate Type Speed Normal Is Shared Connected Branches Flip Handles","title":"Node"},{"location":"API/Index/#branch","text":"Create Selected Add Node To Branch Delete Break Merge Reverse Length Nodes Vertices Normals Tangents","title":"Branch"},{"location":"API/Index/#follower","text":"Game Object Branch Speed Distance Animation State Animation Type","title":"Follower"},{"location":"API/Index/#deformed-mesh","text":"Add Update Processing","title":"Deformed Mesh"},{"location":"API/Index/#prefab-mesh","text":"Create Game Object Deformation Type Mesh Trim Mirror Material Offset Rotation Scale Spacing Tiling Placement","title":"Prefab Mesh"},{"location":"API/Branch/Add_Node_To_Branch/","text":"Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored. Begining public static void Branch_Add_Node_Beginning ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the beginning of branch with key 4 SplinePlusAPI . Branch_Add_Node_Beginning ( sPData , 4 , nodeToAdd ); End public static void Branch_Add_Node_End ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the end of branch with key 4 SplinePlusAPI . Branch_Add_Node_End ( sPData , 4 , node ); Index public static void Branch_Add_Node_At_Index ( SPData sPData , int branchKey , Node nodeToAdd , int index ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node at index 3 in the nodes list of branch with key 4 SplinePlusAPI . Branch_Add_Node_At_Index ( sPData , 4 , node , 3 );","title":"Add Node To Branch"},{"location":"API/Branch/Add_Node_To_Branch/#begining","text":"public static void Branch_Add_Node_Beginning ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the beginning of branch with key 4 SplinePlusAPI . Branch_Add_Node_Beginning ( sPData , 4 , nodeToAdd );","title":"Begining"},{"location":"API/Branch/Add_Node_To_Branch/#end","text":"public static void Branch_Add_Node_End ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node to the end of branch with key 4 SplinePlusAPI . Branch_Add_Node_End ( sPData , 4 , node );","title":"End"},{"location":"API/Branch/Add_Node_To_Branch/#index","text":"public static void Branch_Add_Node_At_Index ( SPData sPData , int branchKey , Node nodeToAdd , int index ) Example: //Create a node to add to the branch Node node = Node_Create_Local ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add node at index 3 in the nodes list of branch with key 4 SplinePlusAPI . Branch_Add_Node_At_Index ( sPData , 4 , node , 3 );","title":"Index"},{"location":"API/Branch/Branch_Length/","text":"Get the length of the branch provided. public static float Branch_Get_Length ( SPData sPData , int branchKey ) Example: //The length of the branch with key 2 var branchLength = SplinePlusAPI . Branch_Get_Length ( sPData , 2 );","title":"Branch Length"},{"location":"API/Branch/Branch_Nodes/","text":"Get the branch nodes list public static List Node Branch_Get_Nodes ( SPData sPData , int branchKey ) Example: //Get the nodes list of branch with key 2 var branchNodes = SplinePlusAPI . Branch_Get_Nodes ( sPData , 2 );","title":"Branch Nodes"},{"location":"API/Branch/Branch_Normals/","text":"Get the branch normals List public static List Vector3 Branch_Get_Normals ( SPData sPData , int branchKey ) Example: //Get the normals list if branch with key 2 List Vector3 normals = SplinePlusAPI . Branch_Get_Normals ( sPData , 2 );","title":"Branch Normals"},{"location":"API/Branch/Branch_Tangents/","text":"Get the branch Vertices List public static List Vector3 Branch_Get_Tangents ( SPData sPData , int branchKey ) Example: //Get the tangents list if branch with key 2 List Vectore3 tangents = SplinePlusAPI . Branch_Get_Tangents ( sPData , 2 );","title":"Branch Tangents"},{"location":"API/Branch/Branch_Vertices/","text":"Get the branch Vertices List public static List Vector3 Branch_Get_Vertices ( SPData sPData , int branchKey ) Example: //Get the vertices list if branch with key 2 List Vector3 vertices = SplinePlusAPI . Branch_Get_Vertices ( sPData , 2 );","title":"Branch Vertices"},{"location":"API/Branch/Break_Branch/","text":"Break the branch to two branches at the node provided, if the node provided is already shared then action will be ignored. public static void Branch_Break ( SPData sPData , Node node ) Example: // get the node of branch with key 2 and node index 3 var node = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //break branch at node SplinePlusAPI . Branch_Break ( sPData , node );","title":"Break Branch"},{"location":"API/Branch/Create_Branch/","text":"Create a new branch at the node provided and return the branch key, public static int Branch_Create ( SPData sPData ) Example: //create 2 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( - 20 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 10 , 0 , 0 )); //create a new branch var branchKey = SplinePlusAPI . Branch_Create ( sPData ); // add nodes to the end of the branch SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node1 ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node2 );","title":"Create Branch"},{"location":"API/Branch/Delete_Branch/","text":"Delete a branch from the branches dictionnary by providing the branch key. public static void Delete_Branch ( SPData sPData , int branchKey ) Example: //Delete branch with key 4 SplinePlusAPI . Delete_Branch ( sPData , 4 );","title":"Delete Branch"},{"location":"API/Branch/Merge_Branch/","text":"Merge two branches togther. public static int Branch_Merge ( SPData sPData , int branchKey1 , int branchKey2 ) Example: //merge branch with key 2 and 1 together var newBranchKey = SplinePlusAPI . Branch_Merge ( sPData , 2 , 1 );","title":"Merge Branch"},{"location":"API/Branch/Reverse_Branch/","text":"Reverse the branch direction. public static void Branch_Reverse ( SPData sPData , int branchKey ) Example: //Reverse the branch with key 2 SplinePlusAPI . Branch_Reverse ( sPData , 2 );","title":"Reverse Branch"},{"location":"API/Branch/Selected_Branch/","text":"Get the selected branch in the unity editor public static Branch Branch_Selected ( this SPData sPData ) Example: //Get the branchSelected var selectedBranch = SplinePlusAPI . Branch_Selected ( sPData );","title":"Selected Branch"},{"location":"API/DeformedMesh/Add/","text":"Deformed Mesh = Add public static DeformedMesh Add_DeformMesh () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object and set its type to deformed mesh var deformedMesh = sPData . Add_DeformMesh ();","title":"[Deformed Mesh](../Index.md)=> Add"},{"location":"API/DeformedMesh/Add/#deformed-mesh-add","text":"public static DeformedMesh Add_DeformMesh () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object and set its type to deformed mesh var deformedMesh = sPData . Add_DeformMesh ();","title":"Deformed Mesh=&gt; Add"},{"location":"API/DeformedMesh/Processing/","text":"Deformed Mesh = Processing Set public static void Set_Processing ( Processing processing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Do the procedural meshes calculations on the GPU deformedMesh . Set_Processing ( Processing . GPU ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Processing Get_Processing ( this DeformedMesh deformedMesh ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Get the processing hardware type used for deformedMesh var processing = deformedMesh . Get_Processing (); Debug . Log ( processing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Deformed Mesh](../Index.md)=> Processing"},{"location":"API/DeformedMesh/Processing/#deformed-mesh-processing","text":"","title":"Deformed Mesh=&gt; Processing"},{"location":"API/DeformedMesh/Processing/#set","text":"public static void Set_Processing ( Processing processing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Do the procedural meshes calculations on the GPU deformedMesh . Set_Processing ( Processing . GPU ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/DeformedMesh/Processing/#get","text":"public static Processing Get_Processing ( this DeformedMesh deformedMesh ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Get the processing hardware type used for deformedMesh var processing = deformedMesh . Get_Processing (); Debug . Log ( processing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/DeformedMesh/Update/","text":"Deformed Mesh = Update Update branches public static void Update_Branches ( bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Update Branch public static void Update_Branch ( int branchKey , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on branch with key 3 deformedMesh . Update_Branch ( 3 , true , true ); Update Node public static void Update_Node ( Node node , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) var node = sPData . BranchesDict [ 3 ] . Nodes [ 0 ] ; //Update procedural mesh generated on the branches connected to node deformedMesh . Update_Node ( node , true , true );","title":"[Deformed Mesh](../Index.md)=> Update"},{"location":"API/DeformedMesh/Update/#deformed-mesh-update","text":"","title":"Deformed Mesh=&gt; Update"},{"location":"API/DeformedMesh/Update/#update-branches","text":"public static void Update_Branches ( bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Update branches"},{"location":"API/DeformedMesh/Update/#update-branch","text":"public static void Update_Branch ( int branchKey , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on branch with key 3 deformedMesh . Update_Branch ( 3 , true , true );","title":"Update Branch"},{"location":"API/DeformedMesh/Update/#update-node","text":"public static void Update_Node ( Node node , bool updateBaseMesh , bool updateMaterials ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) var node = sPData . BranchesDict [ 3 ] . Nodes [ 0 ] ; //Update procedural mesh generated on the branches connected to node deformedMesh . Update_Node ( node , true , true );","title":"Update Node"},{"location":"API/Follower/Follower_Animation_State/","text":"Set Set follower animation state , Enable/Disable follower animation . public static void Follower_Set_AnimationState ( Follower follower , bool value ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation SplinePlusAPI . Follower_Set_AnimationState ( follower , false ); } Get Get follower animation state. public static bool Follower_Get_AnimationState ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; Debug . Log ( SplinePlusAPI . Follower_Get_AnimationState ( follower )); }","title":"Follower Animation State"},{"location":"API/Follower/Follower_Animation_State/#set","text":"Set follower animation state , Enable/Disable follower animation . public static void Follower_Set_AnimationState ( Follower follower , bool value ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation SplinePlusAPI . Follower_Set_AnimationState ( follower , false ); }","title":"Set"},{"location":"API/Follower/Follower_Animation_State/#get","text":"Get follower animation state. public static bool Follower_Get_AnimationState ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; Debug . Log ( SplinePlusAPI . Follower_Get_AnimationState ( follower )); }","title":"Get"},{"location":"API/Follower/Follower_Animation_Type/","text":"Set Set the follower animation type, Random: Move follower on spline branches with a defined speed. Keyboad: Move follower on the spline using keyboard inputs (Arrow keys). public static void Follower_Set_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_Set_AnimationType ( follower , FollowerAnimation . Auto ); } Get Get the follower animation type, public static FollowerAnimation Follower_Get_AnimationType ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower animation type Debug . Log ( SplinePlusAPI . Follower_Get_AnimationType ( follower )); }","title":"Follower Animation Type"},{"location":"API/Follower/Follower_Animation_Type/#set","text":"Set the follower animation type, Random: Move follower on spline branches with a defined speed. Keyboad: Move follower on the spline using keyboard inputs (Arrow keys). public static void Follower_Set_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_Set_AnimationType ( follower , FollowerAnimation . Auto ); }","title":"Set"},{"location":"API/Follower/Follower_Animation_Type/#get","text":"Get the follower animation type, public static FollowerAnimation Follower_Get_AnimationType ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower animation type Debug . Log ( SplinePlusAPI . Follower_Get_AnimationType ( follower )); }","title":"Get"},{"location":"API/Follower/Follower_Branch/","text":"Set Set the follower branch key. public static void Follower_Set_Branch ( Follower follower , int branchKey ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower branch key to 2 SplinePlusAPI . Follower_Set_Branch ( follower , 2 ); } Get Get the follower branch key. public static float Follower_Get_Branch ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower branch key Debug . Log ( SplinePlusAPI . Follower_Get_Branch ( follower )); }","title":"Follower Branch"},{"location":"API/Follower/Follower_Branch/#set","text":"Set the follower branch key. public static void Follower_Set_Branch ( Follower follower , int branchKey ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower branch key to 2 SplinePlusAPI . Follower_Set_Branch ( follower , 2 ); }","title":"Set"},{"location":"API/Follower/Follower_Branch/#get","text":"Get the follower branch key. public static float Follower_Get_Branch ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower branch key Debug . Log ( SplinePlusAPI . Follower_Get_Branch ( follower )); }","title":"Get"},{"location":"API/Follower/Follower_Distance/","text":"Set Set the follower distance on the branch. public static void Follower_Set_Distance ( Follower follower , float progress ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower distance to 0 SplinePlusAPI . Follower_Set_Distance ( follower , 0 ); } Get Get the follower distance on the branch. public static float Follower_Get_Distance ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower distance Debug . Log ( SplinePlusAPI . Follower_Get_Distance ( follower )); }","title":"Follower Distance"},{"location":"API/Follower/Follower_Distance/#set","text":"Set the follower distance on the branch. public static void Follower_Set_Distance ( Follower follower , float progress ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower distance to 0 SplinePlusAPI . Follower_Set_Distance ( follower , 0 ); }","title":"Set"},{"location":"API/Follower/Follower_Distance/#get","text":"Get the follower distance on the branch. public static float Follower_Get_Distance ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower distance Debug . Log ( SplinePlusAPI . Follower_Get_Distance ( follower )); }","title":"Get"},{"location":"API/Follower/Follower_Game_Object/","text":"Set Set the follower gameObject. public static void Follower_Set_GameObject ( Follower follower , GameObject followerGo ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower gameObject SplinePlusAPI . Follower_Set_GameObject ( follower , followerGo ); } Get Get the follower gameObject. public static GameObject Follower_Get_GameObject ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower gameObject var followerGameObject = SplinePlusAPI . Follower_Get_GameObject ( follower ); }","title":"Follower Game Object"},{"location":"API/Follower/Follower_Game_Object/#set","text":"Set the follower gameObject. public static void Follower_Set_GameObject ( Follower follower , GameObject followerGo ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower gameObject SplinePlusAPI . Follower_Set_GameObject ( follower , followerGo ); }","title":"Set"},{"location":"API/Follower/Follower_Game_Object/#get","text":"Get the follower gameObject. public static GameObject Follower_Get_GameObject ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower gameObject var followerGameObject = SplinePlusAPI . Follower_Get_GameObject ( follower ); }","title":"Get"},{"location":"API/Follower/Follower_Speed/","text":"Set Set the follower speed. public static void Follower_Set_Speed ( Follower follower , float speed ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Set_Speed ( follower , 7 ); } Get Get the follower speed. public static float Follower_Get_Speed ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower speed Debug . Log ( SplinePlusAPI . Follower_Get_Speed ( follower )); }","title":"Follower Speed"},{"location":"API/Follower/Follower_Speed/#set","text":"Set the follower speed. public static void Follower_Set_Speed ( Follower follower , float speed ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Set_Speed ( follower , 7 ); }","title":"Set"},{"location":"API/Follower/Follower_Speed/#get","text":"Get the follower speed. public static float Follower_Get_Speed ( Follower follower ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Get follower speed Debug . Log ( SplinePlusAPI . Follower_Get_Speed ( follower )); }","title":"Get"},{"location":"API/Node/Create_Node/","text":"public static Node Node_Create ( SPData sPData , Vector3 nodePos , SpaceType spaceType ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(1,1,1) local space var node = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 1 , 1 , 1 ), SpaceType . Local ); Create Node At Distance public static Node CreateNode_At_Distance ( SPData sPData , int branchKey , float Distance ) Example: //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 40 , 0 , 0 )); //create 3 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 0 ), SpaceType . Local ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node1 ); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 ), SpaceType . Local ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node2 ); var node3 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 20 , 0 , 10 ), SpaceType . Local ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node3 ); var branchLength = SplinePlusAPI . Branch_Length ( sPData , branchKey ); //create a node on the branch defined at a distance of half of branchLength SplinePlusAPI . CreateNode_At_Distance ( sPData , branchKey , branchDistance * 0.5f );","title":"Create Node"},{"location":"API/Node/Create_Node/#create-node-at-distance","text":"public static Node CreateNode_At_Distance ( SPData sPData , int branchKey , float Distance ) Example: //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 40 , 0 , 0 )); //create 3 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 0 ), SpaceType . Local ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node1 ); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 ), SpaceType . Local ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node2 ); var node3 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 20 , 0 , 10 ), SpaceType . Local ); SplinePlusAPI . Node_Add_To_Branch_End ( sPData , branchKey , node3 ); var branchLength = SplinePlusAPI . Branch_Length ( sPData , branchKey ); //create a node on the branch defined at a distance of half of branchLength SplinePlusAPI . CreateNode_At_Distance ( sPData , branchKey , branchDistance * 0.5f );","title":"Create Node At Distance"},{"location":"API/Node/Node_Compound/","text":"public static void Node_Compound ( SPData sPData , Node node ) Example: // Get the first node of the branch with key 0 var targetNode = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get the selected node var selecetdNode = SplinePlusAPI . Node_Selected ( SPData ); //Compound the selectedNode SplinePlusAPI . Node_Compound ( SPData , selecetdNode );","title":"Node Compound"},{"location":"API/Node/Node_Connected_Branches/","text":"Return the node connected branches keys list. public static List int Node_Get_Connected_Branches ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; var connectedBranches = SplinePlusAPI . Node_Get_Connected_Branches ( node ); Debug . Log ( Connected branches keys : ); for ( int i = 0 ; i connectedBranches . Count ; i ++ ){ Debug . Log ( connectedBranches [ i ] ); }","title":"Node Connected Branches"},{"location":"API/Node/Node_Diffuse/","text":"public static void Node_Diffuse ( SPData sPData , Node node ) Example: //Get the selected node var selecetdNode = SplinePlusAPI . Node_Selected ( SPData ); // diffuse the selected node SplinePlusAPI . Node_Diffuse ( SPData , selecetdNode );","title":"Node Diffuse"},{"location":"API/Node/Node_Duplicate/","text":"public static Node Node_Duplicate ( SPData sPData , Node originNode ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Duplicate the node and catch the duplicate in a variable Node duplicateNode = SplinePlusAPI . Node_Duplicate ( SPData , node );","title":"Node Duplicate"},{"location":"API/Node/Node_Flip_Handles/","text":"public static void Node_FlipHandles ( SPData sPData , int BranchKey , int NodeIndex ) Example: //Flip the handles of the second node of the branch with key 0 SplinePlusAPI . Node_FlipHandles ( sPData , 0 , 2 )","title":"Node Flip Handles"},{"location":"API/Node/Node_Fuse/","text":"public static void Node_Fuse ( SPData sPData , Node originNode , Node targetNode ) Example: // Get the first node of the branch with key 0 var targetNode = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get the selected node var selecetdNode = SplinePlusAPI . Node_Selected ( SPData ); // Fuse selectedNode and targetNode SplinePlusAPI . Node_Fuse ( SPData , selecetdNode , targetNode );","title":"Node Fuse"},{"location":"API/Node/Node_Handles_Position/","text":"The handles \"Point1 Point2\" are transforms children of the node transform \"Point\", Set public static void Node_Handles_Set_Position ( SPData sPData , Node node , Vector3 point1Pos , Vector3 point2Pos , SpaceType spaceType , bool updateSpline = true ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 point1LocPos = new Vector3 ( 10 , 0 , 0 ); Vector3 point2LocPos = new Vector3 ( - 10 , 0 , 0 ); SplinePlusAPI . Node_Handles_Set_Position ( sPData , node , point1LocPos , point2LocPos , SpaceType . Local , true ); Get public static Vector3 Node_Get_Point1_Position ( Node node , SpaceType spaceType ) Example: //Get node point1 local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodePoint1LocalPosition = SplinePlusAPI . Node_Get_Point1_Position ( node , SpaceType . Local );","title":"Node Handles Position"},{"location":"API/Node/Node_Handles_Position/#set","text":"public static void Node_Handles_Set_Position ( SPData sPData , Node node , Vector3 point1Pos , Vector3 point2Pos , SpaceType spaceType , bool updateSpline = true ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 point1LocPos = new Vector3 ( 10 , 0 , 0 ); Vector3 point2LocPos = new Vector3 ( - 10 , 0 , 0 ); SplinePlusAPI . Node_Handles_Set_Position ( sPData , node , point1LocPos , point2LocPos , SpaceType . Local , true );","title":"Set"},{"location":"API/Node/Node_Handles_Position/#get","text":"public static Vector3 Node_Get_Point1_Position ( Node node , SpaceType spaceType ) Example: //Get node point1 local position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodePoint1LocalPosition = SplinePlusAPI . Node_Get_Point1_Position ( node , SpaceType . Local );","title":"Get"},{"location":"API/Node/Node_Is_Shared/","text":"Check if node is shared. public static bool Node_Is_Shared ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; Debug . Log ( SplinePlusAPI . Node_Is_Shared ( node ););","title":"Node Is Shared"},{"location":"API/Node/Node_Normal/","text":"Set Set the node normal angle. This is a degree \u00b0 value that varies from -180 to 180 public static void Node_Set_Normal ( SPData sPData , Node node , float NormalFactor ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node normal angle to 90 SplinePlusAPI . Node_Set_Normal ( SPData , node , 90 ); Get Get the node normal angle. public static float Node_Get_Normal ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node normal value var nodeNormal = SplinePlusAPI . Node_Get_Normal ( node );","title":"Node Normal"},{"location":"API/Node/Node_Normal/#set","text":"Set the node normal angle. This is a degree \u00b0 value that varies from -180 to 180 public static void Node_Set_Normal ( SPData sPData , Node node , float NormalFactor ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node normal angle to 90 SplinePlusAPI . Node_Set_Normal ( SPData , node , 90 );","title":"Set"},{"location":"API/Node/Node_Normal/#get","text":"Get the node normal angle. public static float Node_Get_Normal ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node normal value var nodeNormal = SplinePlusAPI . Node_Get_Normal ( node );","title":"Get"},{"location":"API/Node/Node_Position/","text":"Get public static Vector3 Node_Get_Position ( Node node , SpaceType spaceType ) Example: //Get node world position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodeWorldPosition = SplinePlusAPI . Node_Get_Position ( node , SpaceType . World ); Set public static void Node_Set_Position ( SPData sPData , Node node , Vector3 nodePos , SpaceType spaceType , bool updateSpline = true ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newLocalPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_Set_Position ( sPData , node , newLocalPosition , SpaceType . Local , true );","title":"Node Position"},{"location":"API/Node/Node_Position/#get","text":"public static Vector3 Node_Get_Position ( Node node , SpaceType spaceType ) Example: //Get node world position Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; var nodeWorldPosition = SplinePlusAPI . Node_Get_Position ( node , SpaceType . World );","title":"Get"},{"location":"API/Node/Node_Position/#set","text":"public static void Node_Set_Position ( SPData sPData , Node node , Vector3 nodePos , SpaceType spaceType , bool updateSpline = true ) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newLocalPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_Set_Position ( sPData , node , newLocalPosition , SpaceType . Local , true );","title":"Set"},{"location":"API/Node/Node_Remove/","text":"public static void Node_Remove ( SPData sPData , Node nodeToDelete ) Example: //delete the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; SplinePlusAPI . Node_Remove ( sPData , node );","title":"Node Remove"},{"location":"API/Node/Node_Speed/","text":"Set Set the node speed value, public static void Node_Set_Speed ( SPData sPData , Node node , float speed ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node speed to 100 SplinePlusAPI . Node_Set_Speed ( SPData , node , 100 ); Get Get the node speed value, public static float Node_Get_Speed ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get the node speed var nodeSpeed = SplinePlusAPI . Node_Get_Speed ( node );","title":"Node Speed"},{"location":"API/Node/Node_Speed/#set","text":"Set the node speed value, public static void Node_Set_Speed ( SPData sPData , Node node , float speed ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Set node speed to 100 SplinePlusAPI . Node_Set_Speed ( SPData , node , 100 );","title":"Set"},{"location":"API/Node/Node_Speed/#get","text":"Get the node speed value, public static float Node_Get_Speed ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get the node speed var nodeSpeed = SplinePlusAPI . Node_Get_Speed ( node );","title":"Get"},{"location":"API/Node/Node_Type/","text":"Set Change the node bezier curvature type, public static void Node_Set_Type ( SPData sPData , Node node , NodeType newNodeType , bool updateSpline = true ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Set_Type ( SPData , node , NodeType . Smooth ); Get public static NodeType Node_Get_Type ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node type var nodeType = SplinePlusAPI . Node_Get_Type ( node ); Debug . Log ( nodeType );","title":"Node Type"},{"location":"API/Node/Node_Type/#set","text":"Change the node bezier curvature type, public static void Node_Set_Type ( SPData sPData , Node node , NodeType newNodeType , bool updateSpline = true ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Set_Type ( SPData , node , NodeType . Smooth );","title":"Set"},{"location":"API/Node/Node_Type/#get","text":"public static NodeType Node_Get_Type ( Node node ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Get node type var nodeType = SplinePlusAPI . Node_Get_Type ( node ); Debug . Log ( nodeType );","title":"Get"},{"location":"API/Node/Selected_Node/","text":"Get the selected node in the unity Editor public static Node Node_Selected ( this SPData sPData ) Example: //get the selected node var selectedNode = SplinePlusAPI . Node_Selected ( sPData );","title":"Selected Node"},{"location":"API/PrefabMesh/Create/","text":"Prefab Mesh = Create public static PrefabMesh Create_PrefabMesh ( int branchKey , GameObject prefabMeshGO ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Create"},{"location":"API/PrefabMesh/Create/#prefab-mesh-create","text":"public static PrefabMesh Create_PrefabMesh ( int branchKey , GameObject prefabMeshGO ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Prefab Mesh=&gt; Create"},{"location":"API/PrefabMesh/DeformationType/","text":"Prefab Mesh = Deformation Type Set public static void Set_DeformationType ( DeformationType deformationType ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set deformation type to deformation prefabMesh . Set_DeformationType ( DeformationType . Deformation ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static DeformationType Get_DeformationType () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh Deformation type var deformationType = prefabMesh . Get_DeformationType (); Debug . Log ( deformationType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Deformation Type"},{"location":"API/PrefabMesh/DeformationType/#prefab-mesh-deformation-type","text":"","title":"Prefab Mesh=&gt; Deformation Type"},{"location":"API/PrefabMesh/DeformationType/#set","text":"public static void Set_DeformationType ( DeformationType deformationType ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set deformation type to deformation prefabMesh . Set_DeformationType ( DeformationType . Deformation ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/DeformationType/#get","text":"public static DeformationType Get_DeformationType () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh Deformation type var deformationType = prefabMesh . Get_DeformationType (); Debug . Log ( deformationType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/GameObject/","text":"Prefab Mesh = Game Object Set public static void Set_Prefab ( GameObject prefab , string name ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , FensePrefab . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static GameObject Get_Prefab () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , Fence ); // Get the prefab game object of the prefabMesh var prefabGO = prefabMesh . Get_Prefab (); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Game Object"},{"location":"API/PrefabMesh/GameObject/#prefab-mesh-game-object","text":"","title":"Prefab Mesh=&gt; Game Object"},{"location":"API/PrefabMesh/GameObject/#set","text":"public static void Set_Prefab ( GameObject prefab , string name ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , FensePrefab . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/GameObject/#get","text":"public static GameObject Get_Prefab () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ) // Change the prefabMesh prefab game object to FensePrefab prefabMesh . Set_Prefab ( FensePrefab , Fence ); // Get the prefab game object of the prefabMesh var prefabGO = prefabMesh . Get_Prefab (); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Material/","text":"Prefab Mesh = Material Set public static void Set_Material ( Material mat ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh material prefabMesh . Set_Material ( mat ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Material Get_Material () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh material var mat = prefabMesh . Get_Material (); Debug . Log ( mat . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Material"},{"location":"API/PrefabMesh/Material/#prefab-mesh-material","text":"","title":"Prefab Mesh=&gt; Material"},{"location":"API/PrefabMesh/Material/#set","text":"public static void Set_Material ( Material mat ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh material prefabMesh . Set_Material ( mat ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/Material/#get","text":"public static Material Get_Material () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh material var mat = prefabMesh . Get_Material (); Debug . Log ( mat . name ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/MeshTrim/","text":"Prefab Mesh = Mesh Trim Set public static void Set_MeshTrim ( MeshTrim meshTrim ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set MeshTrim type for prefabMesh prefabMesh . Set_MeshTrim ( MeshTrim . Both ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static MeshTrim Get_MeshTrim () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh MeshTrim type var meshTrimType = prefabMesh . Get_MeshTrim (); Debug . Log ( meshTrimType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Mesh Trim"},{"location":"API/PrefabMesh/MeshTrim/#prefab-mesh-mesh-trim","text":"","title":"Prefab Mesh=&gt; Mesh Trim"},{"location":"API/PrefabMesh/MeshTrim/#set","text":"public static void Set_MeshTrim ( MeshTrim meshTrim ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set MeshTrim type for prefabMesh prefabMesh . Set_MeshTrim ( MeshTrim . Both ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/MeshTrim/#get","text":"public static MeshTrim Get_MeshTrim () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh MeshTrim type var meshTrimType = prefabMesh . Get_MeshTrim (); Debug . Log ( meshTrimType ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Mirror/","text":"Prefab Mesh = Mirror Set public static void Set_MirrorAxis ( MirrorAxes mirrorAxis ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh mirror axis to z prefabMesh . Set_MirrorAxis ( MirrorAxes . z ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static MirrorAxes Get_MirrorAxis () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh mirror axis var mirrorAxis = prefabMesh . Get_MirrorAxis (); Debug . Log ( mirrorAxis ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Mirror"},{"location":"API/PrefabMesh/Mirror/#prefab-mesh-mirror","text":"","title":"Prefab Mesh=&gt; Mirror"},{"location":"API/PrefabMesh/Mirror/#set","text":"public static void Set_MirrorAxis ( MirrorAxes mirrorAxis ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh mirror axis to z prefabMesh . Set_MirrorAxis ( MirrorAxes . z ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/Mirror/#get","text":"public static MirrorAxes Get_MirrorAxis () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh mirror axis var mirrorAxis = prefabMesh . Get_MirrorAxis (); Debug . Log ( mirrorAxis ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Offset/","text":"Prefab Mesh = Offset Set public static void Set_Offset ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh offset prefabMesh . Set_Offset ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Vector3 Get_Offset () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh offset var offset = prefabMesh . Get_Offset (); Debug . Log ( offset ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Offset"},{"location":"API/PrefabMesh/Offset/#prefab-mesh-offset","text":"","title":"Prefab Mesh=&gt; Offset"},{"location":"API/PrefabMesh/Offset/#set","text":"public static void Set_Offset ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh offset prefabMesh . Set_Offset ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/Offset/#get","text":"public static Vector3 Get_Offset () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh offset var offset = prefabMesh . Get_Offset (); Debug . Log ( offset ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Placement/","text":"Prefab Mesh = Placement Set public static void Set_Placement ( float placement ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh placement value prefabMesh . Set_Placement ( 2.5 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static float Get_Placement () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh placemenet value var placemenet = prefabMesh . Get_Placement (); Debug . Log ( placemenet ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Placement"},{"location":"API/PrefabMesh/Placement/#prefab-mesh-placement","text":"","title":"Prefab Mesh=&gt; Placement"},{"location":"API/PrefabMesh/Placement/#set","text":"public static void Set_Placement ( float placement ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh placement value prefabMesh . Set_Placement ( 2.5 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/Placement/#get","text":"public static float Get_Placement () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh placemenet value var placemenet = prefabMesh . Get_Placement (); Debug . Log ( placemenet ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Rotation/","text":"Prefab Mesh = Rotation Set public static void Set_Rotation ( Vector3 rot ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh rotation prefabMesh . Set_Rotation ( new Vector3 ( 90 , 0 , 180 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static Vector3 Get_Rotation () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh rotation var rot = prefabMesh . Get_Rotation (); Debug . Log ( rot ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Rotation"},{"location":"API/PrefabMesh/Rotation/#prefab-mesh-rotation","text":"","title":"Prefab Mesh=&gt; Rotation"},{"location":"API/PrefabMesh/Rotation/#set","text":"public static void Set_Rotation ( Vector3 rot ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh rotation prefabMesh . Set_Rotation ( new Vector3 ( 90 , 0 , 180 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/Rotation/#get","text":"public static Vector3 Get_Rotation () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh rotation var rot = prefabMesh . Get_Rotation (); Debug . Log ( rot ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Scale/","text":"Prefab Mesh = Scale Set Non Uniform Scale public static void Set_NonUniform_Scale ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh non uniform scale prefabMesh . Set_NonUniform_Scale ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get Non Uniform Scale public static Vector3 Get_NodeUniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh non uniform scale var scale = prefabMesh . Get_NodeUniform_Scale (); Debug . Log ( scale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Set Uniform Scale public static void Set_Uniform_Scale ( float uniformScale ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh uniform scale prefabMesh . Set_Uniform_Scale ( 0.5f ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get Non Uniform Scale public static float Get_Uniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh uniform scale var uniformScale = prefabMesh . Get_Uniform_Scale (); Debug . Log ( uniformScale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Enable/Disable Uniform Scale public static void Scale_Uniform ( bool isUniform ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Enable prefabMesh uniform scale prefabMesh . Scale_Uniform ( true ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Scale"},{"location":"API/PrefabMesh/Scale/#prefab-mesh-scale","text":"","title":"Prefab Mesh=&gt; Scale"},{"location":"API/PrefabMesh/Scale/#set-non-uniform-scale","text":"public static void Set_NonUniform_Scale ( Vector3 offset ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh non uniform scale prefabMesh . Set_NonUniform_Scale ( new Vector3 ( 10 , 0 , 0 )); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set Non Uniform Scale"},{"location":"API/PrefabMesh/Scale/#get-non-uniform-scale","text":"public static Vector3 Get_NodeUniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh non uniform scale var scale = prefabMesh . Get_NodeUniform_Scale (); Debug . Log ( scale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get Non Uniform Scale"},{"location":"API/PrefabMesh/Scale/#set-uniform-scale","text":"public static void Set_Uniform_Scale ( float uniformScale ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh uniform scale prefabMesh . Set_Uniform_Scale ( 0.5f ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set Uniform Scale"},{"location":"API/PrefabMesh/Scale/#get-non-uniform-scale_1","text":"public static float Get_Uniform_Scale () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get prefabMesh uniform scale var uniformScale = prefabMesh . Get_Uniform_Scale (); Debug . Log ( uniformScale ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get Non Uniform Scale"},{"location":"API/PrefabMesh/Scale/#enabledisable-uniform-scale","text":"public static void Scale_Uniform ( bool isUniform ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Enable prefabMesh uniform scale prefabMesh . Scale_Uniform ( true ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Enable/Disable Uniform Scale"},{"location":"API/PrefabMesh/Spacing/","text":"Prefab Mesh = Spacing Set public static void Set_Spacing ( float spacing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh spacing prefabMesh . Set_Spacing ( 10 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static float Get_Spacing () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh spacing var spacing = prefabMesh . Get_Spacing (); Debug . Log ( spacing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Spacing"},{"location":"API/PrefabMesh/Spacing/#prefab-mesh-spacing","text":"","title":"Prefab Mesh=&gt; Spacing"},{"location":"API/PrefabMesh/Spacing/#set","text":"public static void Set_Spacing ( float spacing ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh spacing prefabMesh . Set_Spacing ( 10 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/Spacing/#get","text":"public static float Get_Spacing () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh spacing var spacing = prefabMesh . Get_Spacing (); Debug . Log ( spacing ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Tiling/","text":"Prefab Mesh = Tiling Set public static void Set_Tiling ( int tiling ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh tiling value prefabMesh . Set_Tiling ( 15 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Get public static int Get_Tiling () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh tiling value var tiling = prefabMesh . Get_Tiling (); Debug . Log ( tiling ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true ); Auto Tiling Called to calculate the required tilling value to fill the branch, public static void AutoTile ( Branch branch ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); var branch = sPData . BranchesDict [ 3 ] ; // Auto calculate the tiling value required to fill the branch prefabMesh . AutoTile ( branch ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"[Prefab Mesh](../Index.md)=> Tiling"},{"location":"API/PrefabMesh/Tiling/#prefab-mesh-tiling","text":"","title":"Prefab Mesh=&gt; Tiling"},{"location":"API/PrefabMesh/Tiling/#set","text":"public static void Set_Tiling ( int tiling ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Set prefabMesh tiling value prefabMesh . Set_Tiling ( 15 ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Set"},{"location":"API/PrefabMesh/Tiling/#get","text":"public static int Get_Tiling () Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); // Get the prefabMesh tiling value var tiling = prefabMesh . Get_Tiling (); Debug . Log ( tiling ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Get"},{"location":"API/PrefabMesh/Tiling/#auto-tiling","text":"Called to calculate the required tilling value to fill the branch, public static void AutoTile ( Branch branch ) Example: //Create a spline plus game object at Vector3.zero var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); //Add a deformed mesh component to the spline plus game object var deformedMesh = sPData . Add_DeformMesh (); //Create a new prefab Mesh for the branch with key 3 var prefabMesh = deformedMesh . Create_PrefabMesh ( 3 , prefabMeshGO ); var branch = sPData . BranchesDict [ 3 ] ; // Auto calculate the tiling value required to fill the branch prefabMesh . AutoTile ( branch ); //Update procedural mesh generated on all the branches deformedMesh . Update_Branches ( true , true );","title":"Auto Tiling"},{"location":"API/SplinePlus/Create_SplinePlus/","text":"Create a Spline Plus game object at a Vector3 position and return the SPData object created, public static SPData SplinePlus_Create ( Vector3 position ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 ));","title":"Create SplinePlus"},{"location":"API/SplinePlus/SplinePlus_Branches/","text":"Get the branches dictionary of an SPData object, public static Dictionary int , Branch SplinePlus_Get_Branches_List ( SPData sPData ) Example: //Get the SPData object var sPData = GetComponent SplinePlus (). SPData ; //Get the branches dictionary of the SPData object var branches = SplinePlusAPI . SplinePlus_Get_Branches_List ( sPData ); // Print the branch keys foreach ( var branch in branches ){ Debug . Log ( branch key= + branch . Key ); }","title":"SplinePlus Branches"},{"location":"API/SplinePlus/SplinePlus_Data/","text":"SPData is a data class for the monobehaviour Spline Plus, You can get the SPData if you already have your spline plus game object in your scene hierarchy like bellow. SPData sPData ; public void Start (){ sPData = GetComponent SplinePlus (). SPData ; } When using the Spline plus API, this is how to get the SPData object. SPData sPData ; public void Start (){ sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); }","title":"SplinePlus Data"},{"location":"API/SplinePlus/SplinePlus_Nodes/","text":"Return a list of all the nodes of the SPData object provided, public static List Node SplinePlus_Get_Nodes ( SPData sPData ) Example: List Node NodesList = SplinePlusAPI . SplinePlus_Get_Nodes ( sPData );","title":"SplinePlus Nodes"},{"location":"API/SplinePlus/SplinePlus_ReferenceAxis/","text":"Set Set Spline plus object reference axis. public static void SplinePlus_Set_Reference_Axis ( this SPData sPData , RefAxis axis ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus object reference axis to Y SplinePlusAPI . SplinePlus_Set_Reference_Axis ( sPData , RefAxis . Y ) Get Get Spline plus object reference axis. public static void SplinePlus_Get_Reference_Axis ( this SPData sPData ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); Debug . Log ( SplinePlusAPI . SplinePlus_Set_Reference_Axis ( sPData ));","title":"SplinePlus ReferenceAxis"},{"location":"API/SplinePlus/SplinePlus_ReferenceAxis/#set","text":"Set Spline plus object reference axis. public static void SplinePlus_Set_Reference_Axis ( this SPData sPData , RefAxis axis ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus object reference axis to Y SplinePlusAPI . SplinePlus_Set_Reference_Axis ( sPData , RefAxis . Y )","title":"Set"},{"location":"API/SplinePlus/SplinePlus_ReferenceAxis/#get","text":"Get Spline plus object reference axis. public static void SplinePlus_Get_Reference_Axis ( this SPData sPData ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); Debug . Log ( SplinePlusAPI . SplinePlus_Set_Reference_Axis ( sPData ));","title":"Get"},{"location":"API/SplinePlus/SplinePlus_Shared_Nodes/","text":"Return a list of all the shared nodes of the SPData object provided, public static List Node SplinePlus_Get_All_Shared_Nodes ( SPData sPData ) Example: List Node sharedNodesList = SplinePlusAPI . SplinePlus_Get_All_Shared_Nodes ( sPData );","title":"SplinePlus Shared Nodes"},{"location":"API/SplinePlus/SplinePlus_Smoothness/","text":"Set Set Spline plus smoothness value. public static void SplinePlus_Set_Smoothness ( SPData sPData , int smoothness ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus smoothness to 15 SplinePlusAPI . SplinePlus_Set_Smoothness ( sPData , 15 ) Get Get Spline plus smoothness value. public static int SplinePlus_Get_Smoothness ( SPData sPData ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); Debug . Log ( SplinePlusAPI . SplinePlus_Get_Smoothness ( sPData ));","title":"SplinePlus Smoothness"},{"location":"API/SplinePlus/SplinePlus_Smoothness/#set","text":"Set Spline plus smoothness value. public static void SplinePlus_Set_Smoothness ( SPData sPData , int smoothness ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); //Set Spline plus smoothness to 15 SplinePlusAPI . SplinePlus_Set_Smoothness ( sPData , 15 )","title":"Set"},{"location":"API/SplinePlus/SplinePlus_Smoothness/#get","text":"Get Spline plus smoothness value. public static int SplinePlus_Get_Smoothness ( SPData sPData ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . SplinePlus_Create ( new Vector3 ( 0 , 0 , 0 )); Debug . Log ( SplinePlusAPI . SplinePlus_Get_Smoothness ( sPData ));","title":"Get"},{"location":"Extrude/Inspector/","text":"Extrudes the spline plus shape and transforms it into a 3D mesh. Features Fully customizable extruded mesh. Correct Uvs, tangents, normals generation. UVs rotation Extruded mesh generation on all spline branches Node normal. Node Scale (Taper effect). Inspector Variables Description Delete Delete the Extrude modifier \"Extrude Component\". Extrusion Parts The parts you want to include in your extrusion, Body: Extrude the body only. Cap: Extrude the cap only. Both: Extrude the body and cap. Flip faces This is used to flip the visible side of your mesh. Two sided Used in case you want your mesh to be visible from both sides. Extrude height Change the extrusion height, Axis: the extrusion axis. Rings The number of ring edges you have in your extrusion shape. Material The extruded mesh material. Uv Rotation Rotate the extruded mesh Uvs.","title":"Extrude"},{"location":"Extrude/Inspector/#features","text":"Fully customizable extruded mesh. Correct Uvs, tangents, normals generation. UVs rotation Extruded mesh generation on all spline branches Node normal. Node Scale (Taper effect).","title":"Features"},{"location":"Extrude/Inspector/#inspector","text":"Variables Description Delete Delete the Extrude modifier \"Extrude Component\". Extrusion Parts The parts you want to include in your extrusion, Body: Extrude the body only. Cap: Extrude the cap only. Both: Extrude the body and cap. Flip faces This is used to flip the visible side of your mesh. Two sided Used in case you want your mesh to be visible from both sides. Extrude height Change the extrusion height, Axis: the extrusion axis. Rings The number of ring edges you have in your extrusion shape. Material The extruded mesh material. Uv Rotation Rotate the extruded mesh Uvs.","title":"Inspector"},{"location":"MeshDeform/Inspector/","text":"A custom meshes procedural mesh generation modifier for Spline Plus. Features Custom meshes combination. Modes: Alignment / Deformation. Procedural mesh generation on all spline branches. Materials sharing. Processing: CPU Single thread - CPU Muli threading - GPU. Translation, rotation, scale with randomization. Node Scale (Taper effect). Node Normal. Mirroring. Mesh trimming. Copy/Past/Duplicate prefab meshes between branches. API to generate procedural mesh at runtime. Inspector Variables Description Delete Delete the Deformed Mesh modifier \"Deformed Mesh Component\". Prefab meshes area This contains a list of prefab meshes of the currently selected branch, Settings bellow are for the selected prefab mesh highlighted in blue. Type Mesh deformation type used , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Processing The processing method used, CPU Single threaded - CPU Multi threaded - GPU. Settings Variables Description Mesh Prefab The prefab mesh game object used. Materials Prefab mesh material used. Tiling Define how many times you want the mesh to be repeated along the spline. Auto tiling: Automatically calculates how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Control the space between the meshes of the prefab mesh. Linked/ Unlinked: This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction. Mesh trim Mesh to not extend beyond the branch distance limits, available options: None, Left, Right, Both Mirror axis Create a mirror effect on a defined axis, you can use rotation and translation to create the mirroring offset. Transform Variables Description Offset Translate the proceduraly calculated meshes. Rand : Create random Offset Seed: Change the randomization seed. Rotation Rotate the proceduraly calculated meshes. Rand : Create random Rotation Seed: Change the randomization seed. Scale Scale the proceduraly calculated meshes Rand : Create random Scale behaviour Seed: Change the randomization seed. Lock Rotation Limit the rotation on the Y axis only. Uniform Scale Enable/Disable uniform scale. Items Menu Right click in your prefab meshes area to open up the items menu for the selected prefab mesh. Variables Description Hide/Unhide Hide/unhide the selected prefab mesh. Delete Delete the selected prefab mesh. Duplicate Duplicate the selected prefab mesh. Copy/Past Copy the selected prefab mesh. To past the copied prefab mesh, right click on an empty area in the prefab meshes section.","title":"Mesh Deform"},{"location":"MeshDeform/Inspector/#features","text":"Custom meshes combination. Modes: Alignment / Deformation. Procedural mesh generation on all spline branches. Materials sharing. Processing: CPU Single thread - CPU Muli threading - GPU. Translation, rotation, scale with randomization. Node Scale (Taper effect). Node Normal. Mirroring. Mesh trimming. Copy/Past/Duplicate prefab meshes between branches. API to generate procedural mesh at runtime.","title":"Features"},{"location":"MeshDeform/Inspector/#inspector","text":"Variables Description Delete Delete the Deformed Mesh modifier \"Deformed Mesh Component\". Prefab meshes area This contains a list of prefab meshes of the currently selected branch, Settings bellow are for the selected prefab mesh highlighted in blue. Type Mesh deformation type used , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Processing The processing method used, CPU Single threaded - CPU Multi threaded - GPU.","title":"Inspector"},{"location":"MeshDeform/Inspector/#settings","text":"Variables Description Mesh Prefab The prefab mesh game object used. Materials Prefab mesh material used. Tiling Define how many times you want the mesh to be repeated along the spline. Auto tiling: Automatically calculates how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Control the space between the meshes of the prefab mesh. Linked/ Unlinked: This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction. Mesh trim Mesh to not extend beyond the branch distance limits, available options: None, Left, Right, Both Mirror axis Create a mirror effect on a defined axis, you can use rotation and translation to create the mirroring offset.","title":"Settings"},{"location":"MeshDeform/Inspector/#transform","text":"Variables Description Offset Translate the proceduraly calculated meshes. Rand : Create random Offset Seed: Change the randomization seed. Rotation Rotate the proceduraly calculated meshes. Rand : Create random Rotation Seed: Change the randomization seed. Scale Scale the proceduraly calculated meshes Rand : Create random Scale behaviour Seed: Change the randomization seed. Lock Rotation Limit the rotation on the Y axis only. Uniform Scale Enable/Disable uniform scale.","title":"Transform"},{"location":"MeshDeform/Inspector/#items-menu","text":"Right click in your prefab meshes area to open up the items menu for the selected prefab mesh. Variables Description Hide/Unhide Hide/unhide the selected prefab mesh. Delete Delete the selected prefab mesh. Duplicate Duplicate the selected prefab mesh. Copy/Past Copy the selected prefab mesh. To past the copied prefab mesh, right click on an empty area in the prefab meshes section.","title":"Items Menu"},{"location":"PathFinding/AgentSettings/","text":"Agent Settings Variables Description Follower The agent game object. Branch key the current branch key the agent is on, To set a branch key for the agent, select the branch from your scene view then click on the \"return\" button. Distance The current distance of the agent on the branch, the max is the length of the branch. Position Translation of the agent, Space Type: World - local space. Rotation Rotation of the agent, On/Off : Enable disable Rotation. Animation Variables Description On/Off Enable/disable agent animation. Speed The speed of the agent Full Speed Time The time it takes the agent to reach full speed. Animation type \u201c Random \u201d move your agent with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your agent using keyboard. branch picking decision is made based on direction keyboard inputs Flip Direction \"Keyboard animation type only\", change the agent facing direction based on keyboard inputs Brake force \"Keyboard animation type only\", brakes force applied. Other Settings Variables Description Direction The direction where path finding calculations will be conducted, Fwd: look for the goal in the forward direction only of the agent. Both: look for the goal in both direction (Backward-Forwad). Gizmos Color The gizmo color for the shortest path found from agent to goal. Events Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed Branch Trigger events based on the current branch of the agent. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the agent is on, events scheduled will be triggered once agent is on the defined branch beginning: Events scheduled will be triggered once agent is on the beginning of the branch defined. end: Events scheduled will be triggered once agent is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the agent is on. Events the events scheduled to be triggered once one of the conditions on top is met OnAwake Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Triggered once agent starts moving after stoping. Variables Description OnMove Events Events you want to trigger when goal starts moving IDLE Triggered once agent stops moving. Variables Description IDLE Events Events you want to trigger when agent stops moving OnKeyPressed Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"Agent Settings"},{"location":"PathFinding/AgentSettings/#agent-settings","text":"Variables Description Follower The agent game object. Branch key the current branch key the agent is on, To set a branch key for the agent, select the branch from your scene view then click on the \"return\" button. Distance The current distance of the agent on the branch, the max is the length of the branch. Position Translation of the agent, Space Type: World - local space. Rotation Rotation of the agent, On/Off : Enable disable Rotation.","title":"Agent Settings"},{"location":"PathFinding/AgentSettings/#animation","text":"Variables Description On/Off Enable/disable agent animation. Speed The speed of the agent Full Speed Time The time it takes the agent to reach full speed. Animation type \u201c Random \u201d move your agent with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your agent using keyboard. branch picking decision is made based on direction keyboard inputs Flip Direction \"Keyboard animation type only\", change the agent facing direction based on keyboard inputs Brake force \"Keyboard animation type only\", brakes force applied.","title":"Animation"},{"location":"PathFinding/AgentSettings/#other-settings","text":"Variables Description Direction The direction where path finding calculations will be conducted, Fwd: look for the goal in the forward direction only of the agent. Both: look for the goal in both direction (Backward-Forwad). Gizmos Color The gizmo color for the shortest path found from agent to goal.","title":"Other Settings"},{"location":"PathFinding/AgentSettings/#events","text":"Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed","title":"Events"},{"location":"PathFinding/AgentSettings/#branch","text":"Trigger events based on the current branch of the agent. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the agent is on, events scheduled will be triggered once agent is on the defined branch beginning: Events scheduled will be triggered once agent is on the beginning of the branch defined. end: Events scheduled will be triggered once agent is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the agent is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Branch"},{"location":"PathFinding/AgentSettings/#onawake","text":"Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"PathFinding/AgentSettings/#onmove","text":"Triggered once agent starts moving after stoping. Variables Description OnMove Events Events you want to trigger when goal starts moving","title":"OnMove"},{"location":"PathFinding/AgentSettings/#idle","text":"Triggered once agent stops moving. Variables Description IDLE Events Events you want to trigger when agent stops moving","title":"IDLE"},{"location":"PathFinding/AgentSettings/#onkeypressed","text":"Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"PathFinding/Events/","text":"Variables Description Title Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, OnAwake, OnMove, IDLE, OnKeyPressed Custom Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met Other Events OnAwake Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Variables Description OnMove Events Events you want to trigger when follower starts moving IDLE Variables Description IDLE Events Events you want to trigger when follower stops moving OnKeyPressed Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"Events"},{"location":"PathFinding/Events/#custom","text":"Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Custom"},{"location":"PathFinding/Events/#other-events","text":"","title":"Other Events"},{"location":"PathFinding/Events/#onawake","text":"Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"PathFinding/Events/#onmove","text":"Variables Description OnMove Events Events you want to trigger when follower starts moving","title":"OnMove"},{"location":"PathFinding/Events/#idle","text":"Variables Description IDLE Events Events you want to trigger when follower stops moving","title":"IDLE"},{"location":"PathFinding/Events/#onkeypressed","text":"Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"PathFinding/GoalSettings/","text":"Goal Settings Variables Description Follower The goal game object. Branch key the current branch key the goal is on, To set a branch key for the goal, select the branch from your scene view then click on the \"return\" button. Distance The current distance of the goal on the branch, the max is the length of the branch. Position Translation of the goal, Space Type: World - local space. Rotation Rotation of the goal, On/Off : Enable disable Rotation. Animation Variables Description On/Off Enable/disable goal animation. Speed The speed of the goal Full Speed Time The time it takes the goal to reach full speed. Animation type \u201c Random \u201d move your goal with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your goal using keyboard. branch picking decision is made based on direction keyboard inputs Flip Direction \"Keyboard animation type only\", change the goal facing direction based on keyboard inputs Brake force \"Keyboard animation type only\", brakes force applied. Events Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed Branch Trigger events based on the current branch of the goal. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the goal is on, events scheduled will be triggered once goal is on the defined branch beginning: Events scheduled will be triggered once goal is on the beginning of the branch defined. end: Events scheduled will be triggered once goal is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the goal is on. Events the events scheduled to be triggered once one of the conditions on top is met OnAwake Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Triggered once goal starts moving after stoping. Variables Description OnMove Events Events you want to trigger when goal starts moving IDLE Triggered once goal stops moving. Variables Description IDLE Events Events you want to trigger when goal stops moving OnKeyPressed Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"Goal Settings"},{"location":"PathFinding/GoalSettings/#goal-settings","text":"Variables Description Follower The goal game object. Branch key the current branch key the goal is on, To set a branch key for the goal, select the branch from your scene view then click on the \"return\" button. Distance The current distance of the goal on the branch, the max is the length of the branch. Position Translation of the goal, Space Type: World - local space. Rotation Rotation of the goal, On/Off : Enable disable Rotation.","title":"Goal Settings"},{"location":"PathFinding/GoalSettings/#animation","text":"Variables Description On/Off Enable/disable goal animation. Speed The speed of the goal Full Speed Time The time it takes the goal to reach full speed. Animation type \u201c Random \u201d move your goal with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your goal using keyboard. branch picking decision is made based on direction keyboard inputs Flip Direction \"Keyboard animation type only\", change the goal facing direction based on keyboard inputs Brake force \"Keyboard animation type only\", brakes force applied.","title":"Animation"},{"location":"PathFinding/GoalSettings/#events","text":"Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed","title":"Events"},{"location":"PathFinding/GoalSettings/#branch","text":"Trigger events based on the current branch of the goal. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the goal is on, events scheduled will be triggered once goal is on the defined branch beginning: Events scheduled will be triggered once goal is on the beginning of the branch defined. end: Events scheduled will be triggered once goal is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the goal is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Branch"},{"location":"PathFinding/GoalSettings/#onawake","text":"Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"PathFinding/GoalSettings/#onmove","text":"Triggered once goal starts moving after stoping. Variables Description OnMove Events Events you want to trigger when goal starts moving","title":"OnMove"},{"location":"PathFinding/GoalSettings/#idle","text":"Triggered once goal stops moving. Variables Description IDLE Events Events you want to trigger when goal stops moving","title":"IDLE"},{"location":"PathFinding/GoalSettings/#onkeypressed","text":"Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"PathFinding/Inspector/","text":"Spline Path Finding is a path finding system for splines, it's a combination of the branching spline system Spline Plus and the path finding algorithm Dijkstra, Features Multiple agents. Advanced Events. Advanced spline modeling features to quickly build complex paths. Full source code included Example scenes included Variables Description On/Off switch Enable/disable goal animation. Game object slot Goal game object. Settings Open goal Settings window. On/Off switch Enable/disable agent animation. Game object slot Agent game object. Settings Open agent Settings window.","title":"Path Finding"},{"location":"PathFinding/Inspector/#features","text":"Multiple agents. Advanced Events. Advanced spline modeling features to quickly build complex paths. Full source code included Example scenes included Variables Description On/Off switch Enable/disable goal animation. Game object slot Goal game object. Settings Open goal Settings window. On/Off switch Enable/disable agent animation. Game object slot Agent game object. Settings Open agent Settings window.","title":"Features"},{"location":"PlaneMesh/Inspector/","text":"Plane mesh is a simple and straightforward Spline mesh deform modifier, it is used to transform the spline plus branches into a plane mesh, similar to the Unity line renderer. Features Fully customizable plane mesh. Correct Uvs, tangents, normals generation. UVs rotation. Plane mesh generation on all spline branches. Node normal. Node Scale (Taper effect). Inspector Variables Description Delete Delete the Plane Mesh modifier \"Plane Mesh Component\". Flip faces Used to flip the visible side of your Plane meshes Two sided Used in case you want your Plane meshes to be visible from both sides, it\u2019s recommended to turn this off Width Used to change the width of the plane mesh generated Axis The reference upward direction the plane mesh will be facing. Material The Plane mesh material Uv Rotation Rotate the plane mesh Uvs Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Plane Mesh"},{"location":"PlaneMesh/Inspector/#features","text":"Fully customizable plane mesh. Correct Uvs, tangents, normals generation. UVs rotation. Plane mesh generation on all spline branches. Node normal. Node Scale (Taper effect).","title":"Features"},{"location":"PlaneMesh/Inspector/#inspector","text":"Variables Description Delete Delete the Plane Mesh modifier \"Plane Mesh Component\". Flip faces Used to flip the visible side of your Plane meshes Two sided Used in case you want your Plane meshes to be visible from both sides, it\u2019s recommended to turn this off Width Used to change the width of the plane mesh generated Axis The reference upward direction the plane mesh will be facing. Material The Plane mesh material Uv Rotation Rotate the plane mesh Uvs Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Inspector"},{"location":"SimpleFollowers/Inspector/","text":"Variables Description On/Off switch Enable/Disable follower animation. Follower game object slot The game object that you want to use as follower, Settings Open the Simple Follower settings window,","title":"Simple Followers"},{"location":"SimpleFollowers/Settings/","text":"Variables Description Follower The follower game object. Branch key the current branch key the follower is on, To set a branch key for the follower, select the branch from your scene view then click on Distance The current distance of the follower on the branch, the max is the length of the branch. Position Translation of the follower with a button to switch between World and local space. Rotation Rotation of the follower, with a button to turn Rotation On/Off in case this was needed. Animation Variables Description Speed The speed of the follower. Full Speed Time The time it takes the follower to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Follower animation type \u201c Random \u201d move your follower with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your follower using keyboard. branch picking decision is made based on direction keyboard inputs Flip Direction \"Keyboard animation type only\", change the follower facing direction based on keyboard inputs Brake Force \"Keyboard animation type only\", brakes force applied. Projection Variables Description On/Off Enable/Disable projected path following. Layer Mask Specify layers to consider by your projection rays Ray transform Used to define the transform that will hold the rays. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Override Spline Normals The follower will use the ground mesh normals if set to true, if set to false, follower will use spline normals raw data instead. Events Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed Branch Trigger events based on the current branch of the follower. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch defined. end: Events scheduled will be triggered once follower is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met OnAwake Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Triggered once follower starts moving after stoping. Variables Description OnMove Events Events you want to trigger when follower starts moving IDLE Triggered once follower stops moving. Variables Description IDLE Events Events you want to trigger when follower stops moving OnKeyPressed Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"Settings"},{"location":"SimpleFollowers/Settings/#animation","text":"Variables Description Speed The speed of the follower. Full Speed Time The time it takes the follower to reach full speed. this is used to create a smooth animation at the start and at the end of the follower animation. Follower animation type \u201c Random \u201d move your follower with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your follower using keyboard. branch picking decision is made based on direction keyboard inputs Flip Direction \"Keyboard animation type only\", change the follower facing direction based on keyboard inputs Brake Force \"Keyboard animation type only\", brakes force applied.","title":"Animation"},{"location":"SimpleFollowers/Settings/#projection","text":"Variables Description On/Off Enable/Disable projected path following. Layer Mask Specify layers to consider by your projection rays Ray transform Used to define the transform that will hold the rays. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Override Spline Normals The follower will use the ground mesh normals if set to true, if set to false, follower will use spline normals raw data instead.","title":"Projection"},{"location":"SimpleFollowers/Settings/#events","text":"Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed","title":"Events"},{"location":"SimpleFollowers/Settings/#branch","text":"Trigger events based on the current branch of the follower. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch defined. end: Events scheduled will be triggered once follower is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Branch"},{"location":"SimpleFollowers/Settings/#onawake","text":"Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"SimpleFollowers/Settings/#onmove","text":"Triggered once follower starts moving after stoping. Variables Description OnMove Events Events you want to trigger when follower starts moving","title":"OnMove"},{"location":"SimpleFollowers/Settings/#idle","text":"Triggered once follower stops moving. Variables Description IDLE Events Events you want to trigger when follower stops moving","title":"IDLE"},{"location":"SimpleFollowers/Settings/#onkeypressed","text":"Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"SplinePlus/Inspector/","text":"File Variables Description Import Import a \".SP\" file format Export Export spline data to a \".SP\" file format Edit Variables Description Copy/Past Copy/Past spline data between Spline Plus game objects. Weld Perform weld action, this will open a popup in the left down corner of your scene view to control the weld Radius. Projection Opens up the projection window settings to perform spline shape projection on scene meshes. Settings Opens up the settings window for the Spline Plus game object. Snap To Grid Snaps all the spline nodes to the current Unity grid. Modifiers Variables Description Deformed Mesh build procedural mesh along the spline from customized meshes. Plane Mesh convert spline plus branches to plane meshes, similar to Unity line renderer. Tube Mesh Convert spline plus branches to tube meshes. Extrude Extrude spline plus branches and transform it into 3d meshes. Spline Path Finding Add path finding AI system to your branching spline system Spline Plus. Simple Followers Add basic followers to your Spline plus game object. Complex Follower (Train) Add train follower to your Spline plus game object. Help Variables Description Documentation Open documentation website","title":"Inspector"},{"location":"SplinePlus/Inspector/#file","text":"Variables Description Import Import a \".SP\" file format Export Export spline data to a \".SP\" file format","title":"File"},{"location":"SplinePlus/Inspector/#edit","text":"Variables Description Copy/Past Copy/Past spline data between Spline Plus game objects. Weld Perform weld action, this will open a popup in the left down corner of your scene view to control the weld Radius. Projection Opens up the projection window settings to perform spline shape projection on scene meshes. Settings Opens up the settings window for the Spline Plus game object. Snap To Grid Snaps all the spline nodes to the current Unity grid.","title":"Edit"},{"location":"SplinePlus/Inspector/#modifiers","text":"Variables Description Deformed Mesh build procedural mesh along the spline from customized meshes. Plane Mesh convert spline plus branches to plane meshes, similar to Unity line renderer. Tube Mesh Convert spline plus branches to tube meshes. Extrude Extrude spline plus branches and transform it into 3d meshes. Spline Path Finding Add path finding AI system to your branching spline system Spline Plus. Simple Followers Add basic followers to your Spline plus game object. Complex Follower (Train) Add train follower to your Spline plus game object.","title":"Modifiers"},{"location":"SplinePlus/Inspector/#help","text":"Variables Description Documentation Open documentation website","title":"Help"},{"location":"SplinePlus/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline Plus is a compact branching splines system and advanced path following tool for Unity3D. Feartures Spline Branching. Compact Spline modeling tools. Node Speed. Node Normal. Node Scale (Taper). Node type : Smooth, Broken, Free. Simple/Complex (Train) followers Followers smooth Acceleration/Deceleration. Followers smart Keyboard navigation at intersections, Projected path following for simple followers. Advanced Events system. Spline projection into mesh. API to Create splines at runtime. Custom Editor and Use of Unity Reorderable lists. Import/Export spline data (.SP files). Copy/Past spline data between Spline Plus game objects. Full source code included. Detailed Documentation. Setup All Packages from ElseForty are placed in the 'ElseForty' folder once imported. To Add a Spline Plus game object to your scene hierarchy. Notions Node They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , The Number on top is the node index in the selected branch nodes list . Info Click on the node in your scene view to select a node. Branch A branch is formed by nodes. the selected branch is marked with green color in your scene view as shown in the image bellow, Info Click on the branch in your scene view to select it. Shared node A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow. Info The node index on top changes based on the branch you're selecting","title":"Introduction"},{"location":"SplinePlus/Introduction/#feartures","text":"Spline Branching. Compact Spline modeling tools. Node Speed. Node Normal. Node Scale (Taper). Node type : Smooth, Broken, Free. Simple/Complex (Train) followers Followers smooth Acceleration/Deceleration. Followers smart Keyboard navigation at intersections, Projected path following for simple followers. Advanced Events system. Spline projection into mesh. API to Create splines at runtime. Custom Editor and Use of Unity Reorderable lists. Import/Export spline data (.SP files). Copy/Past spline data between Spline Plus game objects. Full source code included. Detailed Documentation.","title":"Feartures"},{"location":"SplinePlus/Introduction/#setup","text":"All Packages from ElseForty are placed in the 'ElseForty' folder once imported. To Add a Spline Plus game object to your scene hierarchy.","title":"Setup"},{"location":"SplinePlus/Introduction/#notions","text":"","title":"Notions"},{"location":"SplinePlus/Introduction/#node","text":"They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , The Number on top is the node index in the selected branch nodes list . Info Click on the node in your scene view to select a node.","title":"Node"},{"location":"SplinePlus/Introduction/#branch","text":"A branch is formed by nodes. the selected branch is marked with green color in your scene view as shown in the image bellow, Info Click on the branch in your scene view to select it.","title":"Branch"},{"location":"SplinePlus/Introduction/#shared-node","text":"A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow. Info The node index on top changes based on the branch you're selecting","title":"Shared node"},{"location":"SplinePlus/Projection/","text":"Project the spline into scene view 3D meshes if found. For this to work, the meshes where the spline plus object is being projected needs to have a 3D collider on. Projection Window Variables Description Project Spline trigger a spline shape projection Raycast length The length of the projection raycast. Offset The local translation offset applied to the spline on the Y axis in case offsetting spline is required. Handles projection Enables the handles projection as well, this will increases projection precision. Mesh orientation Override the spline normals with the projection mesh normals. Continuos Update Set this to On if you want mesh projetion to be updated in every frame in both Editor and Playmode. Projection Rays Display the rays gizmos in your scene view.","title":"Projection"},{"location":"SplinePlus/Projection/#projection-window","text":"Variables Description Project Spline trigger a spline shape projection Raycast length The length of the projection raycast. Offset The local translation offset applied to the spline on the Y axis in case offsetting spline is required. Handles projection Enables the handles projection as well, this will increases projection precision. Mesh orientation Override the spline normals with the projection mesh normals. Continuos Update Set this to On if you want mesh projetion to be updated in every frame in both Editor and Playmode. Projection Rays Display the rays gizmos in your scene view.","title":"Projection Window"},{"location":"SplinePlus/SceneView/","text":"Items Menu Info Right click in your scene view to open the items menu bellow. Node Variables Description Add Add a node to the selected branch. Delete Delete the selected node. Fuse Fuse the selected node with another node. Difuse Diffuse (Explode) a shared node. Compound Convert a shared node to simple node if the shared node is shared by two branches only. Break Break the selected branch at the selected node. Variables Description Normal Change the selected node Normal. Scale Change the selected node Scale, this becomes usefull when having mesh modifiers applied to Spline Plus. Speed Change the selected node Speed. Coordinates Manually edit the selected node coordinates. Variables Description Hide/Unhide Hide/Unhide node handles. Flip Flip the selected node handles, this will flip the node bezier curve. Type Change the node type. Branch Variables Description Add Add a new branch. Delete Delete the selected Branch. Difuse Difuse the selected branch. Reverse Flip the direction of the selected branch. Type Close: Close the selected branch, works only if branch has no shared forks, Open: Open the selected branch. Debuging Area Used to display the data you are currently selecting Variables Description Connected branches The branch keys connected to the selected node in case one is selected Branch The selected branch key in the branches dictionary","title":"Scene view"},{"location":"SplinePlus/SceneView/#items-menu","text":"Info Right click in your scene view to open the items menu bellow.","title":"Items Menu"},{"location":"SplinePlus/SceneView/#node","text":"Variables Description Add Add a node to the selected branch. Delete Delete the selected node. Fuse Fuse the selected node with another node. Difuse Diffuse (Explode) a shared node. Compound Convert a shared node to simple node if the shared node is shared by two branches only. Break Break the selected branch at the selected node. Variables Description Normal Change the selected node Normal. Scale Change the selected node Scale, this becomes usefull when having mesh modifiers applied to Spline Plus. Speed Change the selected node Speed. Coordinates Manually edit the selected node coordinates. Variables Description Hide/Unhide Hide/Unhide node handles. Flip Flip the selected node handles, this will flip the node bezier curve. Type Change the node type.","title":"Node"},{"location":"SplinePlus/SceneView/#branch","text":"Variables Description Add Add a new branch. Delete Delete the selected Branch. Difuse Difuse the selected branch. Reverse Flip the direction of the selected branch. Type Close: Close the selected branch, works only if branch has no shared forks, Open: Open the selected branch.","title":"Branch"},{"location":"SplinePlus/SceneView/#debuging-area","text":"Used to display the data you are currently selecting Variables Description Connected branches The branch keys connected to the selected node in case one is selected Branch The selected branch key in the branches dictionary","title":"Debuging Area"},{"location":"SplinePlus/Settings/","text":"Variables Description Gizmos This hides and unhides the gizmos in your scene view. Gizmos size This appears only if gizmos is set to On, This allows you to control the size of the gizmos in you scene view . Helpers This hides and unhides the normals tangents representation in the scene view Helpers size This appears only if helpers is set to \"On\", this controls the helpers size. Interpolate rotation this smooths rotation when path following if set to true. Node type the default node type you want to use when adding new nodes. Reference axis The spline normals default direction, this is used to change the reference normal direction of the spline, it is very useful when changing the scene view mode Smoothness This changes the number of vertices between two nodes, it controls the smoothness of your spline curve. Animation Define keyboard shortcuts that you want to use to move your followers when animation type keyboard is set. Gizmos Colors Variables Description Simple Node Color used for simple node sphere gizmos in scene view. Shared Node Color used for shared node sphere gizmos in scene view.","title":"Settings"},{"location":"SplinePlus/Settings/#animation","text":"Define keyboard shortcuts that you want to use to move your followers when animation type keyboard is set.","title":"Animation"},{"location":"SplinePlus/Settings/#gizmos-colors","text":"Variables Description Simple Node Color used for simple node sphere gizmos in scene view. Shared Node Color used for shared node sphere gizmos in scene view.","title":"Gizmos Colors"},{"location":"SplinePlus/Shortcuts/","text":"\u201cReturn key\u201d Switch between the branches connected to the selected node \u201cBackSpace key\u201d Delete the selected node \u201cC key\u201d Focus scene view camera on the selected node \u201cH key\u201d Hide/Unhide node handles \u201cR key\u201d Reverse branch direction \u201cX key\u201d Flip the handle of the selected node \u201cEscape key\u201d Reset editing mode to default \"selection\"","title":"Shortcuts"},{"location":"TrainFollower/Inspector/","text":"Variables Description Settings (Train) Open Train Settings window, Game object slots Train wagons game objects, Settings (Wagon) Open Wagon Settings window,","title":"Train Follower"},{"location":"TrainFollower/TrainSettings/","text":"Variables Description Branch key the current branch key the train wagons are on, To set a branch key for the train's wagons, select the branch from your scene view and click on Distance in case you want the wagons to be placed with equal distance from each other then use this instead of going through each wagon distance individually Animation Variables Description Speed The speed of the train. Full Speed Time The time it takes the train to reach full speed. this is used to create a smooth animation at the start and at the end of the train animation. Train animation type \u201c Random \u201d move your train with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your train using keyboard. branch picking decision is made based on direction keyboard inputs Brake Force \"Keyboard animation type only\", brake force applied to train when using brakes. Events Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed Branch Trigger events based on the current branch of the Train head. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the train head is on, events scheduled will be triggered once train head is on the defined branch beginning: Events scheduled will be triggered once train head is on the beginning of the branch defined. end: Events scheduled will be triggered once train head is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the train head is on. Events the events scheduled to be triggered once one of the conditions on top is met OnAwake Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Triggered once train starts moving after stoping. Variables Description OnMove Events Events you want to trigger when follower starts moving IDLE Triggered once train stops moving. Variables Description IDLE Events Events you want to trigger when follower stops moving OnKeyPressed Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"TrainSettings"},{"location":"TrainFollower/TrainSettings/#animation","text":"Variables Description Speed The speed of the train. Full Speed Time The time it takes the train to reach full speed. this is used to create a smooth animation at the start and at the end of the train animation. Train animation type \u201c Random \u201d move your train with a defined speed along the spline. branch picking decision is made randomly at intersection \u201cKeyboard \u201d move your train using keyboard. branch picking decision is made based on direction keyboard inputs Brake Force \"Keyboard animation type only\", brake force applied to train when using brakes.","title":"Animation"},{"location":"TrainFollower/TrainSettings/#events","text":"Variables Description Event Name Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, On Awake, On Move, IDLE, On Key Pressed","title":"Events"},{"location":"TrainFollower/TrainSettings/#branch","text":"Trigger events based on the current branch of the Train head. Variables Description Branch fork type The branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the train head is on, events scheduled will be triggered once train head is on the defined branch beginning: Events scheduled will be triggered once train head is on the beginning of the branch defined. end: Events scheduled will be triggered once train head is on the end of the branch defined. branch key The branch key of the branch that the scheduled events will trigger once the train head is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Branch"},{"location":"TrainFollower/TrainSettings/#onawake","text":"Triggered once the game starts, Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"TrainFollower/TrainSettings/#onmove","text":"Triggered once train starts moving after stoping. Variables Description OnMove Events Events you want to trigger when follower starts moving","title":"OnMove"},{"location":"TrainFollower/TrainSettings/#idle","text":"Triggered once train stops moving. Variables Description IDLE Events Events you want to trigger when follower stops moving","title":"IDLE"},{"location":"TrainFollower/TrainSettings/#onkeypressed","text":"Triggered once a defined key is pressed. Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"TrainFollower/WagonSettings/","text":"Variables Description Follower The wagon game object. Distance The current distance of the wagon on the branch, the max is the length of the branch. Position Translation of the wagon with a drop down list to switch between World and local space. Rotation Rotation of the wagon, with a drop down list to turn Rotation On/Off.","title":"WagonSettings"},{"location":"TubeMesh/Inspector/","text":"Tube mesh transforms spline plus branches into fully customizable 3D mesh tubes. Features Fully customizable tube mesh. Correct Uvs, tangents, normals generation. UVs rotation Tube mesh generation on all spline branches Node normal. Node Scale (Taper effect). Inspector Variables Description Delete Delete the Tube Mesh modifier \"Tube Mesh Component\". Flip faces Flip the tubes mesh faces Two sides The tube mesh will be visible from inside as from outside if it\u2019s set to true. Radius This is the tube radius Segments This is the number of segments the tubes will have, Material The tube mesh material Uv Rotation Rotate the tube mesh Uvs","title":"Tube Mesh"},{"location":"TubeMesh/Inspector/#features","text":"Fully customizable tube mesh. Correct Uvs, tangents, normals generation. UVs rotation Tube mesh generation on all spline branches Node normal. Node Scale (Taper effect).","title":"Features"},{"location":"TubeMesh/Inspector/#inspector","text":"Variables Description Delete Delete the Tube Mesh modifier \"Tube Mesh Component\". Flip faces Flip the tubes mesh faces Two sides The tube mesh will be visible from inside as from outside if it\u2019s set to true. Radius This is the tube radius Segments This is the number of segments the tubes will have, Material The tube mesh material Uv Rotation Rotate the tube mesh Uvs","title":"Inspector"}]}